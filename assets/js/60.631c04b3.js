(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{204:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"kotlin的类型系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kotlin的类型系统","aria-hidden":"true"}},[t._v("#")]),t._v(" Kotlin的类型系统")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#可空性"}},[t._v("可空性")]),s("ul",[s("li",[s("a",{attrs:{href:"#可空类型"}},[t._v("可空类型")])]),s("li",[s("a",{attrs:{href:"#安全调用运算符"}},[t._v("安全调用运算符?.")])]),s("li",[s("a",{attrs:{href:"#elvis运算符"}},[t._v("Elvis运算符?:")])]),s("li",[s("a",{attrs:{href:"#安全转换运算符-as"}},[t._v("安全转换运算符as?")])]),s("li",[s("a",{attrs:{href:"#非空断言"}},[t._v("非空断言!!")])]),s("li",[s("a",{attrs:{href:"#let函数"}},[t._v("let函数")])]),s("li",[s("a",{attrs:{href:"#延迟初始化的属性"}},[t._v("延迟初始化的属性")])]),s("li",[s("a",{attrs:{href:"#可空类型的扩展"}},[t._v("可空类型的扩展")])]),s("li",[s("a",{attrs:{href:"#类型参数的可空性"}},[t._v("类型参数的可空性")])])])]),s("li",[s("a",{attrs:{href:"#可空性和java"}},[t._v("可空性和Java")]),s("ul",[s("li",[s("a",{attrs:{href:"#可空性注解"}},[t._v("可空性注解")])]),s("li",[s("a",{attrs:{href:"#平台类型"}},[t._v("平台类型")])]),s("li",[s("a",{attrs:{href:"#继承"}},[t._v("继承")])])])]),s("li",[s("a",{attrs:{href:"#基本数据类型"}},[t._v("基本数据类型")]),s("ul",[s("li",[s("a",{attrs:{href:"#基本数据类型"}},[t._v("基本数据类型")])]),s("li",[s("a",{attrs:{href:"#可空的基本数据类型"}},[t._v("可空的基本数据类型")])]),s("li",[s("a",{attrs:{href:"#数字转换"}},[t._v("数字转换")])]),s("li",[s("a",{attrs:{href:"#any和any"}},[t._v("Any和Any?")])]),s("li",[s("a",{attrs:{href:"#unit类型"}},[t._v("Unit类型")])]),s("li",[s("a",{attrs:{href:"#nothing类型"}},[t._v("Nothing类型")])])])]),s("li",[s("a",{attrs:{href:"#集合"}},[t._v("集合")]),s("ul",[s("li",[s("a",{attrs:{href:"#可空性和集合"}},[t._v("可空性和集合")])]),s("li",[s("a",{attrs:{href:"#只读集合和可变集合"}},[t._v("只读集合和可变集合")])]),s("li",[s("a",{attrs:{href:"#kotlin集合和java"}},[t._v("Kotlin集合和Java")])]),s("li",[s("a",{attrs:{href:"#作为平台类型的集合"}},[t._v("作为平台类型的集合")])])])]),s("li",[s("a",{attrs:{href:"#数组"}},[t._v("数组")]),s("ul",[s("li",[s("a",{attrs:{href:"#对象数组"}},[t._v("对象数组")])]),s("li",[s("a",{attrs:{href:"#基本数据类型的数组"}},[t._v("基本数据类型的数组")])])])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"可空性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可空性","aria-hidden":"true"}},[t._v("#")]),t._v(" 可空性")]),t._v(" "),s("p",[t._v("可空性是Kotlin类型系统中帮助你避免NPE(NullPointerException)错误的特性。")]),t._v(" "),s("p",[t._v("现代编程语言包括Kotlin解决这类问题的方法是把运行时的错误转变成编译期的错误。通过支持作为类型系统的一部分的可空性，编译器就能在编译期发现很多潜在的错误，从而减少运行时抛出异常的可能性。")]),t._v(" "),s("p",[t._v("Java也有一些帮助解决NPE错误的方案。")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("@Nullable")]),t._v("和"),s("code",[t._v("@NotNull")]),t._v("注解可用来表示值的可空性。有些工具（如IntelliJ IDEA）可利用这些注解来发现可能抛出NPE的位置，但这些工具都不是标准Java编译过程的一部分。")])]),t._v(" "),s("li",[s("p",[t._v("使用Java8中引入的Optional类型来表示这个值可能没有被定义。但这种方式会使代码变得冗长，额外的包装接口还会影响运行时的性能。")])])]),t._v(" "),s("h3",{attrs:{id:"可空类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可空类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 可空类型")]),t._v(" "),s("p",[t._v("Kotlin和Java的类型系统之间最大的区别是：Kotlin对可空类型的显式支持。")]),t._v(" "),s("p",[t._v("可空类型是任何类型的后面加"),s("code",[t._v("?")]),t._v("。这样表示这个类型可以存储对应类型的数据，也可以存储null引用。即"),s("code",[t._v("Type? = Type or null")]),t._v("。而没有"),s("code",[t._v("?")]),t._v("的类型是不允许存储null引用，即所有常见类型默认都是非空的。")]),t._v(" "),s("p",[t._v("一个可空类型的值，对它进行的操作会受到限制。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("不能再调用它的方法。")])]),t._v(" "),s("li",[s("p",[t._v("不能把它赋值给非空类型的变量。")])]),t._v(" "),s("li",[s("p",[t._v("不能让它作为非空类型的参数的实参。")])])]),t._v(" "),s("p",[t._v("Kotlin的可空类型并不是非空类型的包装。类型的检查是发生在编译期，这意味着可空类型并不会在运行时带来额外的开销。")]),t._v(" "),s("h3",{attrs:{id:"安全调用运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安全调用运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 安全调用运算符"),s("code",[t._v("?.")])]),t._v(" "),s("p",[t._v("安全调用运算符"),s("code",[t._v("?.")]),t._v("会把一次null检查和一次方法调用合并成一个操作。例如，"),s("code",[t._v("s?.toUpperCase()")]),t._v("等同于"),s("code",[t._v("if (s != null) s.toUpperCase() else null")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/15195672384980/15197219987016.jpg",alt:"安全调用-w350"}})]),t._v(" "),s("p",[s("code",[t._v("?.")]),t._v("不仅可用来调用方法，也能用来访问属性。")]),t._v(" "),s("p",[t._v("可把多个安全调用链接在一起。"),s("code",[t._v("val country = company?.address?.country")]),t._v("。")]),t._v(" "),s("p",[t._v("注意"),s("code",[t._v("?.")]),t._v("的结果为可空类型。")]),t._v(" "),s("h3",{attrs:{id:"elvis运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#elvis运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" Elvis运算符"),s("code",[t._v("?:")])]),t._v(" "),s("p",[t._v("Elvis运算符"),s("code",[t._v("?:")]),t._v("接收两个运算数，如果第一个运算数不为null，运算结果就是第一个运算数，否则就是第二个运算数。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/15195672384980/15197225466642.jpg",alt:"Elvis运算符-w348"}})]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" Person"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("countryName")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" \n    company"),s("span",{attrs:{class:"token operator"}},[t._v("?")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("address"),s("span",{attrs:{class:"token operator"}},[t._v("?")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("country "),s("span",{attrs:{class:"token operator"}},[t._v("?:")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"Unknown"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("strLenSafe")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{attrs:{class:"token operator"}},[t._v("?")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),s("span",{attrs:{class:"token operator"}},[t._v("?")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{attrs:{class:"token operator"}},[t._v("?:")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("Elvis运算符的一种常用场景是：把return或throw操作写在Elvis运算符的右边，当Elvis运算符左边的值为null时，函数就立即返回一个默认值或者抛出一个异常。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("printShippingLabel")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Person"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" address "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" person"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("company"),s("span",{attrs:{class:"token operator"}},[t._v("?")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("address\n        "),s("span",{attrs:{class:"token operator"}},[t._v("?:")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("IllegalArgumentException")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"No address"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"安全转换运算符as"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安全转换运算符as","aria-hidden":"true"}},[t._v("#")]),t._v(" 安全转换运算符"),s("code",[t._v("as?")])]),t._v(" "),s("p",[t._v("和常规的Java类型转换一样，如果被转换的值不是你试图转换的类型，就会抛出ClassCastException异常。")]),t._v(" "),s("p",[t._v("类型转换时，可先使用"),s("code",[t._v("is")]),t._v("来检查类型，再使用"),s("code",[t._v("as")]),t._v("来转换类型。其实可使用Kotlin的安全转换运算符"),s("code",[t._v("as?")]),t._v("来优雅地实现。")]),t._v(" "),s("p",[s("code",[t._v("as?")]),t._v("运算符尝试把值转换成指定的类型，如果值不是合适的类型就返回null。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/15195672384980/15197231627200.jpg",alt:"安全转换-w493"}})]),t._v(" "),s("p",[t._v("一种常见的模式是把安全转换"),s("code",[t._v("as?")]),t._v("和Elvis运算符"),s("code",[t._v("?:")]),t._v("结合使用。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("Person")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" name"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("equals")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Any"),s("span",{attrs:{class:"token operator"}},[t._v("?")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Boolean "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" other "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("as")]),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" Person "),s("span",{attrs:{class:"token operator"}},[t._v("?:")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n        \n        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" other"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" name\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("h3",{attrs:{id:"非空断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非空断言","aria-hidden":"true"}},[t._v("#")]),t._v(" 非空断言"),s("code",[t._v("!!")])]),t._v(" "),s("p",[t._v("非空断言"),s("code",[t._v("!!")]),t._v("可以把任何值转换成非空类型。如果对null值做非空断言，则会抛出异常。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/15195672384980/15197238845656.jpg",alt:"非空断言-w561"}})]),t._v(" "),s("p",[t._v("非空断言可以连续调用。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("person"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("company"),s("span",{attrs:{class:"token operator"}},[t._v("!!")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("address"),s("span",{attrs:{class:"token operator"}},[t._v("!!")]),t._v("country\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("但若发生异常时，异常调用栈的跟踪信息只表明异常发生在哪一行代码，而不会表明异常发生在哪一个表达式。为了让跟踪信息更精确地显示出哪个值为null，最好避免在同一行中使用多个"),s("code",[t._v("!!")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"let函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#let函数","aria-hidden":"true"}},[t._v("#")]),t._v(" let函数")]),t._v(" "),s("p",[t._v("let函数会把一个调用它的对象变成lambda表达式的参数。如果结合安全调用运算符"),s("code",[t._v("?.")]),t._v("，它能把调用let函数的可空对象转变成非空类型。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/15195672384980/15197255138451.jpg",alt:"let函数和安全调用结合使用-w519"}})]),t._v(" "),s("p",[t._v("let函数和安全调用结合使用，能让一个可空对象作为一个接受非空参数的函数的实参。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("sendEmail")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("email"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token function"}},[t._v("println")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"send '),s("span",{attrs:{class:"token interpolation variable"}},[t._v("$email")]),t._v('"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" email"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"daking@qq.com"')]),t._v("\nemail"),s("span",{attrs:{class:"token operator"}},[t._v("?")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("let")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("sendEmail")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("h3",{attrs:{id:"延迟初始化的属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#延迟初始化的属性","aria-hidden":"true"}},[t._v("#")]),t._v(" 延迟初始化的属性")]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("lateinit")]),t._v("修饰符来声明一个延迟初始化的属性。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("lateinit")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" service"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" MyService\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("注意，延迟初始化的属性都是"),s("code",[t._v("var")]),t._v("，因为需要在构造方法外修改它的值。而"),s("code",[t._v("val")]),t._v("属性会被编译成必须在构造方法中初始化的final字段。")]),t._v(" "),s("p",[t._v("尽管"),s("code",[t._v("lateinit")]),t._v("属性是非空类型，但是你不需要在构造方法中初始化它。如果在该属性被初始化之前就访问它，会得到异常“lateinit property xxx has not been initialized”。")]),t._v(" "),s("p",[s("code",[t._v("lateinit")]),t._v("属性常用于依赖注入，它的值被依赖注入框架从外部设置。为了保证和各种Java依赖注入框架的兼容性，Kotlin会自动生成一个和"),s("code",[t._v("lateinit")]),t._v("属性具有相同可见性的字段。")]),t._v(" "),s("h3",{attrs:{id:"可空类型的扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可空类型的扩展","aria-hidden":"true"}},[t._v("#")]),t._v(" 可空类型的扩展")]),t._v(" "),s("p",[t._v("为可空类型定义扩展函数是一种更强大的处理null值的方式。它可以允许接收者为null的调用，并在该函数中处理null，而不是在确保变量不为null之后再调用它的方法。")]),t._v(" "),s("p",[t._v("Kotlin标准库中定义的扩展函数"),s("code",[t._v("isNullOrBlank")]),t._v("，它的接收者为"),s("code",[t._v("String?")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" String"),s("span",{attrs:{class:"token operator"}},[t._v("?")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("isNullOrBlank")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Boolean "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" \n    "),s("span",{attrs:{class:"token keyword"}},[t._v("this")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("isBlank")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("在Java中，this永远是非空的，因为它引用的是当前你所在的类的实例。而在Kotlin中，在可空类型的扩展函数中，this可以为null。")]),t._v(" "),s("p",[t._v("不需要安全访问，可以直接调用为可空接收者声明的扩展函数。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("verifyUserInput")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{attrs:{class:"token operator"}},[t._v("?")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("isNullOrBlank")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token function"}},[t._v("println")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"Please fill in the required fields"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h3",{attrs:{id:"类型参数的可空性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型参数的可空性","aria-hidden":"true"}},[t._v("#")]),t._v(" 类型参数的可空性")]),t._v(" "),s("p",[t._v("Kotlin中所有泛型类和泛型函数的类型参数"),s("strong",[t._v("默认都是可空的")]),t._v("。任何类型，包括可空类型在内，都可以替换类型参数。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("printHashCode")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" T"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token function"}},[t._v("println")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{attrs:{class:"token operator"}},[t._v("?")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("hashCode")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 因为t可能为null，所以必须使用安全调用")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{attrs:{class:"token function"}},[t._v("printHashCode")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("null")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// T被推导成Any?")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("要使类型参数为非空，必须要为它"),s("strong",[t._v("指定一个非空的上界")]),t._v("，那样泛型会拒绝可空值作为实参。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Any"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("printHashCode")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" T"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token function"}},[t._v("println")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("hashCode")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{attrs:{class:"token function"}},[t._v("printHashCode")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("null")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// T的上界为Any，T是非空的")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h2",{attrs:{id:"可空性和java"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可空性和java","aria-hidden":"true"}},[t._v("#")]),t._v(" 可空性和Java")]),t._v(" "),s("h3",{attrs:{id:"可空性注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可空性注解","aria-hidden":"true"}},[t._v("#")]),t._v(" 可空性注解")]),t._v(" "),s("p",[t._v("根据Java代码中的注解，Java类型会在Kotlin中表示为可空类型和非空类型。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/15195672384980/15197419516118.jpg",alt:"Java注解与Kotlin类型"}})]),t._v(" "),s("p",[t._v("Kotlin可以识别多种不同风格的可空性注解。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("JSR-305标准的注解，位于"),s("code",[t._v("javax.annotation")]),t._v("包之中。")])]),t._v(" "),s("li",[s("p",[t._v("Android注解，位于"),s("code",[t._v("android.support.annotation")]),t._v("包之中。")])]),t._v(" "),s("li",[s("p",[t._v("JetBrains工具支持的注解，位于"),s("code",[t._v("org.jetbrains.annotations")]),t._v("包之中。")])])]),t._v(" "),s("h3",{attrs:{id:"平台类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#平台类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 平台类型")]),t._v(" "),s("p",[t._v("如果Java代码中不存在这些可空性注解，Java类型会变成Kotlin中的平台类型。"),s("strong",[t._v("平台类型")]),t._v("本质上就是Kotlin不知道可空性信息的类型，即可以把它当做可空类型处理，也可以当做非空类型处理。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("/* person.name为Java属性 */")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" s"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" person"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\n"),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" s"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" person"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[s("img",{attrs:{src:"/15195672384980/15197422212359.jpg",alt:"平台类型"}})]),t._v(" "),s("p",[t._v("在Kotlin中不能声明一个平台类型的变量，这些类型只能来自Java代码。")]),t._v(" "),s("h3",{attrs:{id:"继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承","aria-hidden":"true"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),s("p",[t._v("在Kotlin中重写Java的方法时，可以选择把参数和返回类型定义成可空的，也可以选择把它们定义成非空的。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("/* Java */")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("StringProcessor")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("process")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String value"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" StringPrinter "),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" StringProcessor "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("process")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{attrs:{class:"token operator"}},[t._v("?")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token function"}},[t._v("println")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),s("span",{attrs:{class:"token operator"}},[t._v("?:")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"value is null"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("在实现Java类或接口的方法时一定要分析清楚它的可空性，因为方法的实现可以在非Kotlin代码中被调用。Kotlin编译器会为你声明的每一个非空的参数生成非空断言，如果Java代码传给这个方法一个null值，断言就会触发，最终得到一个异常。")]),t._v(" "),s("h2",{attrs:{id:"基本数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本数据类型")]),t._v(" "),s("h3",{attrs:{id:"基本数据类型-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本数据类型")]),t._v(" "),s("p",[t._v("Java为基本数据类型提供了对应的包装类型，在需要对象时对基本数据类型进行封装。例如，不能用"),s("code",[t._v("Collection<int>")]),t._v("来定义一个整数的集合，而必须用"),s("code",[t._v("Collection<Integer>")]),t._v("。")]),t._v(" "),s("p",[t._v("Kotlin不区分基本数据类型和包装类型，都是使用同一个类型。例如，Int。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" i"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" list"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" List"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Int"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("listOf")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("但这并不意味着Kotlin使用对象来表示所有的基本数据类型。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("大多数情况下，对于变量、属性、参数和返回类型，Kotlin的基本数据类型会被编译成Java基本数据类型。例如，Int -> int。")])]),t._v(" "),s("li",[s("p",[t._v("用作泛型类型参数的基本数据类型会被编译成对应的Java包装类型。例如，Int -> Integer。")])])]),t._v(" "),s("h3",{attrs:{id:"可空的基本数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可空的基本数据类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 可空的基本数据类型")]),t._v(" "),s("p",[t._v("Kotlin中的基本数据类型对应的可空类型，因为它们能存储null，所以只能将它们编译成对应的Java包装类型。")]),t._v(" "),s("h3",{attrs:{id:"数字转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数字转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 数字转换")]),t._v(" "),s("p",[t._v("Kotlin不会自动地把数字从一种类型转换成另外一种，即便是转换成范围更大的类型。Kotlin要求你显式地转换类型。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" i "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 类型推导为Int")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" l"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Long "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),s("span",{attrs:{class:"token comment"}},[t._v("// 错误：类型不匹配，Kotlin不会自动转换")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" l"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Long "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("toLong")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 正确，显式转换")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("每一种基本数据类型（Boolean除外）都定义有转换函数："),s("code",[t._v("toByte()")]),t._v("、"),s("code",[t._v("toShort()")]),t._v("和"),s("code",[t._v("toChar()")]),t._v("等。这些函数支持双向转换。")]),t._v(" "),s("p",[t._v("Kotlin书写数字字面值的方式：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("使用十进制数字表示Int：10。")])]),t._v(" "),s("li",[s("p",[t._v("使用后缀L表示Long：10L。")])]),t._v(" "),s("li",[s("p",[t._v("使用标准浮点数表示Double：0.12、2.0、1.2e10。")])]),t._v(" "),s("li",[s("p",[t._v("使用后缀F表示Float：123.4f。")])]),t._v(" "),s("li",[s("p",[t._v("使用前缀0x或0X表示十六进制字面值。")])]),t._v(" "),s("li",[s("p",[t._v("使用前缀0b或0B表示二进制字面值。")])])]),t._v(" "),s("p",[t._v("当你使用数字字面值去初始化一个类型已知的变量，或是把字面值作为实参传给函数时，必要的转换会自动发生。此外，算术运算符也被重载成可接收所有适当的数字类型。")]),t._v(" "),s("p",[t._v("Kotlin标准库提供了一套相似的扩展方法，用来把字符串转换成基本数据类型，如"),s("code",[t._v("toInt")]),t._v("、"),s("code",[t._v("toLong")]),t._v("等。这些函数都会尝试把字符串解析成对应的类型，如果解析失败则抛出"),s("code",[t._v("NumberFormatException")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"any和any"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#any和any","aria-hidden":"true"}},[t._v("#")]),t._v(" Any和Any?")]),t._v(" "),s("p",[t._v("在Kotlin中，"),s("code",[t._v("Any")]),t._v("是所有类型的超类型，包括像"),s("code",[t._v("Int")]),t._v("这样的基本数据类型。")]),t._v(" "),s("p",[t._v("在底层，"),s("code",[t._v("Any")]),t._v("类型对应"),s("code",[t._v("java.lang.Object")]),t._v("。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Kotlin把Java方法参数和返回类型中用到的"),s("code",[t._v("Object")]),t._v("类型看作"),s("code",[t._v("Any")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("当Kotlin函数使用"),s("code",[t._v("Any")]),t._v("时，它会被编译成Java字节码中的"),s("code",[t._v("Object")]),t._v("。")])])]),t._v(" "),s("p",[s("code",[t._v("Any")]),t._v("是非空类型，所以它不能存储null值。而"),s("code",[t._v("Any?")]),t._v("是可空类型，能够持有任何可能值，包括null值。")]),t._v(" "),s("h3",{attrs:{id:"unit类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unit类型","aria-hidden":"true"}},[t._v("#")]),t._v(" Unit类型")]),t._v(" "),s("p",[t._v("Kotlin中的"),s("code",[t._v("Unit")]),t._v("类型完成了Java中的"),s("code",[t._v("void")]),t._v("一样的功能。")]),t._v(" "),s("p",[s("code",[t._v("Unit")]),t._v("与"),s("code",[t._v("void")]),t._v("的区别是："),s("code",[t._v("Unit")]),t._v("是一个完备的类型，可以作为类型参数，而"),s("code",[t._v("void")]),t._v("不行。"),s("code",[t._v("Unit")]),t._v("类型只有一种值，就是"),s("code",[t._v("Unit")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("Unit")]),t._v("作为函数的返回类型时，如果没有重写泛型函数，在底层它会被编译成旧的"),s("code",[t._v("void")]),t._v("函数；如果重写泛型函数，函数中会隐式地返回Unit值。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" Processor"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("process")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" T\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" NoResultProcessor "),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v("  Processor"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Unit"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("process")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token comment"}},[t._v("// 这里会隐式地返回Unit，不需要显式的return")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h3",{attrs:{id:"nothing类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nothing类型","aria-hidden":"true"}},[t._v("#")]),t._v(" Nothing类型")]),t._v(" "),s("p",[t._v("Nothing类型没有任何值，只有被当作函数返回值使用，或者被当作泛型函数返回值的类型参数使用才会有意义。")]),t._v(" "),s("p",[t._v("返回类型为Nothing的函数表示该函数永远不会成功地结束。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("fail")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Nothing "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("IllegalStateException")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("返回Nothing的函数可以放在Elvis运算符的右边来做先决条件检查。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" address "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" company"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("address "),s("span",{attrs:{class:"token operator"}},[t._v("?:")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("fail")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"No address"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h2",{attrs:{id:"集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集合","aria-hidden":"true"}},[t._v("#")]),t._v(" 集合")]),t._v(" "),s("p",[t._v("Kotlin的集合是以Java集合库为基础构建，并通过扩展函数增加集合的特性。")]),t._v(" "),s("h3",{attrs:{id:"可空性和集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可空性和集合","aria-hidden":"true"}},[t._v("#")]),t._v(" 可空性和集合")]),t._v(" "),s("p",[t._v("集合变量自己类型的可空性和用作类型参数的类型的可空性是有区别的。例如，包含可空Int的列表和包含Int的可空列表之间的区别如下图。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/15195672384980/15197998253905.jpg",alt:"List<Int?>与List?-w436"}})]),t._v(" "),s("p",[t._v("要分清楚是集合的元素可空（"),s("code",[t._v("List<Int?>")]),t._v("），还是集合本身可空（"),s("code",[t._v("List<Int>?")]),t._v("，又或者是两者都可空（"),s("code",[t._v("List<Int?>?")]),t._v("。")]),t._v(" "),s("p",[t._v("遍历一个包含可空值的集合并过滤掉null是一个常见的操作，Kotlin提供了一个标准库函数"),s("code",[t._v("filterNotNull")]),t._v("来完成这个事情。")]),t._v(" "),s("h3",{attrs:{id:"只读集合和可变集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#只读集合和可变集合","aria-hidden":"true"}},[t._v("#")]),t._v(" 只读集合和可变集合")]),t._v(" "),s("p",[t._v("Kotlin的集合设计与Java的最大不同是：它把访问集合数据的接口和修改集合数据的接口分开了。")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("kotlin.collections.Collection")]),t._v("接口是只读集合的基础接口，可使用它来遍历集合、获取集合大小、判断集合中是否包含某个元素。但该接口没有任何添加或删除元素的方法。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("kotlin.collections.MutableCollection")]),t._v("接口继承"),s("code",[t._v("Collection")]),t._v("，可使用它来添加和删除元素、清空集合等。")])])]),t._v(" "),s("p",[t._v("就像"),s("code",[t._v("val")]),t._v("和"),s("code",[t._v("var")]),t._v("之前的分离一样，只读集合接口与可变集合接口的分离能让程序中更容易理解。例如，如果函数接收"),s("code",[t._v("Collection")]),t._v("表示不会修改集合；如果函数接收"),s("code",[t._v("MutableCollection")]),t._v("表示将会修改数据。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("copyElements")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Collection"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    target"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" MutableCollection"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item "),s("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" source"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 【\n        target"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("add")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("注意，不能把只读集合类型的变量作为可变集合类型参数的实参，即使它的值是一个可变集合。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" source"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Collection"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Int"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("arrayListOf")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("5")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("7")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" target"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Collection"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Int"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("arrayListOf")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("// 错误。即使target的值为可变集合，但变量的类型声明为只读集合，不能作为可变集合类型参数的实参。")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("copyElements")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("只读集合不一定是不可变的。如果你使用的变量拥有一个只读接口类型，它可能只是同一个集合的众多引用中的一个，任何其他的引用都可能拥有一个可变接口类型。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/15195672384980/15198011938735.jpg",alt:"同一个集合的多个引用-w383"}})]),t._v(" "),s("h3",{attrs:{id:"kotlin集合和java"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kotlin集合和java","aria-hidden":"true"}},[t._v("#")]),t._v(" Kotlin集合和Java")]),t._v(" "),s("p",[t._v("每一个Kotlin集合实例都是其对应Java集合接口的一个实例，在Kotlin和Java之间转移并不需要转换，不需要包装器也不需要拷贝数据。")]),t._v(" "),s("p",[t._v("但是每一种Java集合接口在Kotlin中都有两种表示：只读的和可变的。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/15195672384980/15198014735615.jpg",alt:"只读的和可变的集合接口-w589"}})]),t._v(" "),s("p",[t._v("Kotlin中只读接口和可变接口的基本结构与"),s("code",[t._v("java.util")]),t._v("包中的Java集合接口的结构是平行的。可变接口直接对应"),s("code",[t._v("java.util")]),t._v("包中的接口，而它们的只读版本缺少了所有产生改变的方法。")]),t._v(" "),s("p",[t._v("除了集合之外，Kotlin中Map类（它并没有继承Collection或Iterable）也被表示成两种不同的版本：Map和MutableMap。")]),t._v(" "),s("p",[t._v("Kotlin标准库定义了一系列函数用来创建不同类型的集合。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("集合类型")]),t._v(" "),s("th",[t._v("只读")]),t._v(" "),s("th",[t._v("可变")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("List")]),t._v(" "),s("td",[s("code",[t._v("listOf")])]),t._v(" "),s("td",[s("code",[t._v("mutableListOf")]),t._v("、"),s("code",[t._v("arrayListOf")])])]),t._v(" "),s("tr",[s("td",[t._v("Set")]),t._v(" "),s("td",[s("code",[t._v("setOf")])]),t._v(" "),s("td",[s("code",[t._v("mutableSetOf")]),t._v("、"),s("code",[t._v("hashSetOf")]),t._v("、"),s("code",[t._v("linkedSetOf")]),t._v("、"),s("code",[t._v("sortedSetOf")])])]),t._v(" "),s("tr",[s("td",[t._v("Map")]),t._v(" "),s("td",[s("code",[t._v("mapOf")])]),t._v(" "),s("td",[s("code",[t._v("mutableMapOf")]),t._v("、"),s("code",[t._v("hashMapOf")]),t._v("、"),s("code",[t._v("linkedMapOf")]),t._v("、"),s("code",[t._v("sortedMapOf")])])])])]),t._v(" "),s("p",[t._v("Java并不会区分只读集合与可变集合，即使Kotlin中把集合声明成只读的，Java代码也能够修改这个集合。例如，调用一个形参为"),s("code",[t._v("Collection")]),t._v("的Java方法，可把"),s("code",[t._v("Collection")]),t._v("或"),s("code",[t._v("MutableCollection")]),t._v("的值作为实参传递。")]),t._v(" "),s("h3",{attrs:{id:"作为平台类型的集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作为平台类型的集合","aria-hidden":"true"}},[t._v("#")]),t._v(" 作为平台类型的集合")]),t._v(" "),s("p",[t._v("上面讨论过“平台类型”，同样，Java中声明的集合类型也被视为平台类型。")]),t._v(" "),s("ul",[s("li",[t._v("如果Java代码中不存在可空性注解，Java类型会变成Kotlin中的平台类型。平台类型本质上就是Kotlin不知道可空性信息的类型，即可以把它当做可空类型处理，也可以当做非空类型处理。")])]),t._v(" "),s("p",[t._v("在重写或实现签名中有集合类型的Java方法时，可根据需要自行决定使用哪种Kotlin类型，主要考虑如下几点：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("集合是否可空。")])]),t._v(" "),s("li",[s("p",[t._v("集合中的元素是否可空。")])]),t._v(" "),s("li",[s("p",[t._v("你的方法会不会修改集合。")])])]),t._v(" "),s("h2",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组","aria-hidden":"true"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),s("p",[t._v("Kotlin的集合的函数式API也同样适用于数组。")]),t._v(" "),s("h3",{attrs:{id:"对象数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象数组","aria-hidden":"true"}},[t._v("#")]),t._v(" 对象数组")]),t._v(" "),s("p",[t._v("Kotlin中的一个数组是一个带有类型参数的类，其元素类型被指定为相应的类型参数。")]),t._v(" "),s("p",[t._v("在Kotlin中创建数组，可使用如下方法：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("arrayOf")]),t._v("函数创建一个数组，它包含的元素是指定为该函数的实参。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("arrayOfNulls")]),t._v("创建一个给定大小的数组，包含的是null元素。当然，它只能用来创建包含元素类型可空的数组。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Array")]),t._v("构造方法接收数组的大小和一个lambda表达式，调用lambda表达式来创建每一个元素。")])])]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("/* 创建包含指定元素的数组 */")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" numbers "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("arrayOf")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("4")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("5")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("/* 创建大小为5，元素全为null的数组。元素类型为Int? */")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" list "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrayOfNulls"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Int"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("5")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("/* 创建从a到z的字符串数组 */")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" letters "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("String"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("26")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" i "),s("span",{attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("toString")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("Kotlin数组类型的类型参数始终会变成对象类型。比如，你声明了一个"),s("code",[t._v("Array<Int>")]),t._v("，它将会是一个包含装箱整型的数组（即它的Java类型将是"),s("code",[t._v("Integer[]")]),t._v("）。")]),t._v(" "),s("h3",{attrs:{id:"基本数据类型的数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型的数组","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本数据类型的数组")]),t._v(" "),s("p",[t._v("如果你需要创建没有装箱的基本数据类型的数组，必须使用一个基本数据类型数组的特殊类。例如，"),s("code",[t._v("IntArray")]),t._v("、"),s("code",[t._v("LongArray")]),t._v("等，它们分别对应普通的Java基本数据类型数组，如"),s("code",[t._v("int[]")]),t._v("、"),s("code",[t._v("long[]")]),t._v("等。")]),t._v(" "),s("p",[t._v("要创建一个基本数据类型的数组，可使用如下方法：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("该类型的构造方法接收size参数，并返回一个使用对应基本数据类型默认值初始化好的数组。")])]),t._v(" "),s("li",[s("p",[t._v("工厂函数（比如"),s("code",[t._v("IntArray的intArrayOf")]),t._v("）接收变长参数的值，并创建存储这些值的数组。")])]),t._v(" "),s("li",[s("p",[t._v("该类型的另一种构造方法，接收一个size参数和一个用来初始化每个元素的lambda。")])])]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" intArr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("IntArray")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("5")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" intArr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("intArrayOf")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" intArr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("IntArray")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("5")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" i "),s("span",{attrs:{class:"token operator"}},[t._v("->")]),t._v(" i "),s("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" i "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 0, 1, 4, 9, 16")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("假如你有一个持有基本数据类型装箱后的值的数组或集合，可用对应的转换函数把它们转换成基本数据类型的值，比如"),s("code",[t._v("toIntArray()")]),t._v("。")])])}],!1,null,null,null);e.options.__file="Kotlin的类型系统.md";a.default=e.exports}}]);