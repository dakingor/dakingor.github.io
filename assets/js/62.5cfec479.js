(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{206:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"lambda编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lambda编程","aria-hidden":"true"}},[t._v("#")]),t._v(" Lambda编程")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#lambda表达式"}},[t._v("Lambda表达式")]),s("ul",[s("li",[s("a",{attrs:{href:"#lambda的语法"}},[t._v("Lambda的语法")])]),s("li",[s("a",{attrs:{href:"#作为函数参数的lambda"}},[t._v("作为函数参数的lambda")])]),s("li",[s("a",{attrs:{href:"#lambda和集合"}},[t._v("Lambda和集合")])]),s("li",[s("a",{attrs:{href:"#lambda的语法简化"}},[t._v("Lambda的语法简化")])]),s("li",[s("a",{attrs:{href:"#在作用域中访问变量"}},[t._v("在作用域中访问变量")])]),s("li",[s("a",{attrs:{href:"#成员引用"}},[t._v("成员引用")])])])]),s("li",[s("a",{attrs:{href:"#集合的函数式api"}},[t._v("集合的函数式API")]),s("ul",[s("li",[s("a",{attrs:{href:"#过滤：filter"}},[t._v("过滤：filter")])]),s("li",[s("a",{attrs:{href:"#变换：map"}},[t._v("变换：map")])]),s("li",[s("a",{attrs:{href:"#判断：all、any、count、find"}},[t._v("判断：all、any、count、find")])]),s("li",[s("a",{attrs:{href:"#分组：groupby"}},[t._v("分组：groupBy")])]),s("li",[s("a",{attrs:{href:"#平铺：flatmap、flatten"}},[t._v("平铺：flatMap、flatten")])])])]),s("li",[s("a",{attrs:{href:"#序列"}},[t._v("序列")]),s("ul",[s("li",[s("a",{attrs:{href:"#序列的惰性求值"}},[t._v("序列的惰性求值")])]),s("li",[s("a",{attrs:{href:"#序列的操作"}},[t._v("序列的操作")])]),s("li",[s("a",{attrs:{href:"#创建序列"}},[t._v("创建序列")])])])]),s("li",[s("a",{attrs:{href:"#java函数式接口"}},[t._v("Java函数式接口")]),s("ul",[s("li",[s("a",{attrs:{href:"#lambda作为参数传递给java方法"}},[t._v("lambda作为参数传递给Java方法")])]),s("li",[s("a",{attrs:{href:"#显式地把lambda转换成sam接口"}},[t._v("显式地把lambda转换成SAM接口")])]),s("li",[s("a",{attrs:{href:"#lambda和this"}},[t._v("lambda和this")])])])]),s("li",[s("a",{attrs:{href:"#带接收者的lambda"}},[t._v("带接收者的lambda")]),s("ul",[s("li",[s("a",{attrs:{href:"#with函数"}},[t._v("with函数")])]),s("li",[s("a",{attrs:{href:"#apply函数"}},[t._v("apply函数")])])])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"lambda表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lambda表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" Lambda表达式")]),t._v(" "),s("h3",{attrs:{id:"lambda的语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lambda的语法","aria-hidden":"true"}},[t._v("#")]),t._v(" Lambda的语法")]),t._v(" "),s("p",[t._v("lambda表达式的语法："),s("code",[t._v("{ 参数列表 -> 函数体 }")]),t._v("。例如，"),s("code",[t._v("{ x: Int, y: Int -> x + y }")]),t._v("。")]),t._v(" "),s("p",[t._v("可以将lambda表达式存储在一个变量中，把这个变量当作普通函数对待，就是可以通过相应实参来调用它。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" sum "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int "),s("span",{attrs:{class:"token operator"}},[t._v("->")]),t._v(" x "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" y "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("sum")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("lambda表达式大括号中的"),s("strong",[t._v("最后一句为它的返回值")]),t._v("。")]),t._v(" "),s("p",[t._v("可以使用Kotlin标准库函数"),s("code",[t._v("run")]),t._v("来直接执行lambda表达式。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token function"}},[t._v("run")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("println")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"I am daking"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"作为函数参数的lambda"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作为函数参数的lambda","aria-hidden":"true"}},[t._v("#")]),t._v(" 作为函数参数的lambda")]),t._v(" "),s("p",[t._v("在你的代码中存储和传递一小段行为是常有的任务，如事件监听器、把某个操作应用到一个数据结构的所有元素上等。")]),t._v(" "),s("p",[t._v("在老版本的Java中（Java8之前），用匿名内部类来实现这个需求。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("button"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("setOnClickListener")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("OnClickListener")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("onClick")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("View view"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token comment"}},[t._v("/* 点击后执行的动作 */")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("函数式编程把函数当作值来对待，直接传递函数，而不需要像Java那样先声明一个类再传递这个类的实例。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("button"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("setOnClickListener")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("view"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v("/* 点击后执行的动作 */")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("使用Lambda表达式，不需要声明函数，可以高效地直接传递代码块作为函数参数。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("button"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("setOnClickListener")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" view "),s("span",{attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("/* 点击后执行的动作 */")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"lambda和集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lambda和集合","aria-hidden":"true"}},[t._v("#")]),t._v(" Lambda和集合")]),t._v(" "),s("p",[t._v("在Kotlin中，可在任何集合上调用"),s("code",[t._v("maxBy")]),t._v("函数，它只需要一个实参 —— 一个函数，指定比较哪个值来找到最大元素。可使用lambda来作为函数参数传入。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" people "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("listOf")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token function"}},[t._v("Person")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"daking"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("27")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("Person")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"wing"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("26")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npeople"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("maxBy")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" p"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Person "),s("span",{attrs:{class:"token operator"}},[t._v("->")]),t._v(" p"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("如果lambda刚好是函数或者属性的委托，可用成员引用替换。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("people"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("maxBy")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Person"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),t._v("age"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"lambda的语法简化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lambda的语法简化","aria-hidden":"true"}},[t._v("#")]),t._v(" Lambda的语法简化")]),t._v(" "),s("p",[t._v("Lambda的语法可以根据以下各种情况来进行简化。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("people"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("maxBy")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" p"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Person "),s("span",{attrs:{class:"token operator"}},[t._v("->")]),t._v(" p"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("如果lambda表达式是函数调用的最后一个实参，它可以放在括号的外边。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("people"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("maxBy")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" p"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Person "),s("span",{attrs:{class:"token operator"}},[t._v("->")]),t._v(" p"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("当lambda是函数唯一的实参时，还可以去掉调用代码中的空括号对。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("people"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("maxBy")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" p"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Person "),s("span",{attrs:{class:"token operator"}},[t._v("->")]),t._v(" p"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("如果lambda参数的类型可以被推导出来，就不需要显式地指定它。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("people"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("maxBy")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" p "),s("span",{attrs:{class:"token operator"}},[t._v("->")]),t._v(" p"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("如果当前上下文期望的只有一个参数的lambda，且这个参数的类型可以推断出来，就可以用默认参数名称"),s("code",[t._v("it")]),t._v("来代替命名参数。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("people"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("maxBy")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"在作用域中访问变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在作用域中访问变量","aria-hidden":"true"}},[t._v("#")]),t._v(" 在作用域中访问变量")]),t._v(" "),s("p",[t._v("当在函数中声明一个匿名内部类时，能够在这个匿名类内部引用这个函数的参数和局部变量。")]),t._v(" "),s("p",[t._v("lambda也同样。如果在函数内部使用lambda，lambda也可以访问这个函数的参数和在lambda之前定义的局部变量。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("printMsgWithPrefix")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msgs"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Collection"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("String"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prefix"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    msgs"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("forEach")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token function"}},[t._v("println")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"'),s("span",{attrs:{class:"token interpolation variable"}},[t._v("$prefix")]),t._v(" "),s("span",{attrs:{class:"token interpolation variable"}},[t._v("$it")]),t._v('"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("Java只允许捕捉final变量，即Kotlin的val变量。但在Kotlin中，lambda不仅可以访问val变量，还可以访问var变量并修改它们。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("printProblemCounts")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("response"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Collection"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Int"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" errors "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n    response"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("forEach")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it "),s("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            errors"),s("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{attrs:{class:"token function"}},[t._v("println")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"errors: '),s("span",{attrs:{class:"token interpolation variable"}},[t._v("$errors")]),t._v('"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("默认情况下，局部变量的生命周期被限制在声明这个变量的函数中，但如果它被lambda捕捉，它的生命周期就与lambda相关。")]),t._v(" "),s("p",[t._v("实际上，lambda捕捉变量的实现细节为：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("lambda捕捉了一个val变量，它的值被拷贝下来。")])]),t._v(" "),s("li",[s("p",[t._v("当捕捉了一个var变量，它的值被作为Ref类的一个实例存储下来。Ref变量是val的能轻易地捕捉，然而实际值被存储在Ref字段中，可以在lambda中进行修改。")])])]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" counter "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" inc "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" counter"),s("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("// 上面的两行代码等价于下面的三行代码")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" Ref"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" value"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" T"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" counter "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("Ref")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" inc "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" counter"),s("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("h3",{attrs:{id:"成员引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#成员引用","aria-hidden":"true"}},[t._v("#")]),t._v(" 成员引用")]),t._v(" "),s("p",[t._v("使用成员引用表达式来创建一个调用单个方法或者访问单个属性的函数值。")]),t._v(" "),s("p",[t._v("将类中的某个方法或属性变成成员引用，语法为"),s("code",[t._v("类名::成员名")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("Person"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),t._v("age "),s("span",{attrs:{class:"token comment"}},[t._v("// Person类中的age属性")]),t._v("\nPerson"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),t._v("say "),s("span",{attrs:{class:"token comment"}},[t._v("// Person类中的say方法")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("可以引用顶层函数，语法为"),s("code",[t._v("::顶层函数名")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("sayHi")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("println")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"I am daking."')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("run")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token operator"}},[t._v("::")]),t._v("sayHi"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("可以引用扩展函数，语法为"),s("code",[t._v("接收者::扩展函数名")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" Person"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("isAdult")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" age "),s("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("18")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" predicate "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Person"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),t._v("isAdult\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("可以引用构造方法，语法为"),s("code",[t._v("::类名称")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("data")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("Person")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" name"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" age"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" createPerson "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("::")]),t._v("Person\n"),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" p "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("createPerson")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"daking"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("27")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h2",{attrs:{id:"集合的函数式api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集合的函数式api","aria-hidden":"true"}},[t._v("#")]),t._v(" 集合的函数式API")]),t._v(" "),s("p",[t._v("Kotlin标准库中定义了和集合有关的一些函数，来简化我们的业务代码。")]),t._v(" "),s("p",[t._v("集合的函数式API支持链式调用。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("people"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("filter")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("30")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("map")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h3",{attrs:{id:"过滤：filter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#过滤：filter","aria-hidden":"true"}},[t._v("#")]),t._v(" 过滤：filter")]),t._v(" "),s("p",[t._v("filter函数遍历集合并选出应用给定lambda后会返回true的那些元素。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" list "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("listOf")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("4")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("println")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("filter")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it "),s("span",{attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// [2, 4]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("filterKeys和filterValues可分别用于过滤map的键和值。")]),t._v(" "),s("h3",{attrs:{id:"变换：map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变换：map","aria-hidden":"true"}},[t._v("#")]),t._v(" 变换：map")]),t._v(" "),s("p",[t._v("map函数对集合中的每一个元素应用给定的函数并把结果收集到一个新集合。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" list "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("listOf")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("4")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("println")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("map")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it "),s("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" it "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// [1, 4, 9, 16]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("mapKeys和mapValues可分别用于变换map的键和值。")]),t._v(" "),s("h3",{attrs:{id:"判断：all、any、count、find"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断：all、any、count、find","aria-hidden":"true"}},[t._v("#")]),t._v(" 判断：all、any、count、find")]),t._v(" "),s("p",[t._v("all函数是检查集合中的"),s("strong",[t._v("所有元素")]),t._v("是否都满足判断式，返回Boolean。")]),t._v(" "),s("p",[t._v("any函数是检查集合中是否"),s("strong",[t._v("至少存在一个")]),t._v("匹配的元素，返回Boolean。")]),t._v(" "),s("p",[t._v("count函数是计算集合中满足判断式的元素"),s("strong",[t._v("个数")]),t._v("，返回Int。")]),t._v(" "),s("p",[t._v("find函数是找出集合中"),s("strong",[t._v("首个满足判断式的元素")]),t._v("，返回元素。")]),t._v(" "),s("h3",{attrs:{id:"分组：groupby"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分组：groupby","aria-hidden":"true"}},[t._v("#")]),t._v(" 分组：groupBy")]),t._v(" "),s("p",[t._v("groupBy函数把所有元素按照不同的特征划分成不同的分组。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("// 根据年龄进行分组")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" people "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("listOf")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token function"}},[t._v("Person")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"daking"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("27")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("Person")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"kun"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("26")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("Person")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"wing"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("26")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("println")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("people"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("groupBy")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("groupBy函数的操作结果是一个map，键是分组依据，值是元素分组。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("{\n    27=[Person{name=daking, age=27}],\n    26=[Person{name=kun, age=26}, Person{name=wing, age=26}]\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"平铺：flatmap、flatten"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#平铺：flatmap、flatten","aria-hidden":"true"}},[t._v("#")]),t._v(" 平铺：flatMap、flatten")]),t._v(" "),s("p",[t._v("flatMap函数主要做了两件事情：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("根据传入的函数对集合中的每个元素做变换操作。")])]),t._v(" "),s("li",[s("p",[t._v("把多个列表合并成一个列表，即平铺。")])])]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" strings "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("listOf")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"abc"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"def"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("println")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strings"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("flatMap")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("toList")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// [a, b, c, d, e, f]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("flatten不会对元素进行变换，直接对集合进行平铺操作。例如，将一个元素为列表的列表平铺成一个列表。"),s("code",[t._v("listOfLists.flatten()")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"序列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#序列","aria-hidden":"true"}},[t._v("#")]),t._v(" 序列")]),t._v(" "),s("h3",{attrs:{id:"序列的惰性求值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#序列的惰性求值","aria-hidden":"true"}},[t._v("#")]),t._v(" 序列的惰性求值")]),t._v(" "),s("p",[t._v("集合的函数式API支持链式调用，但每一步的"),s("strong",[t._v("中间结果")]),t._v("都会被存储在一个"),s("strong",[t._v("临时集合")]),t._v("中。如果原集合的元素个数比较多，那么链式调用就会变得十分低消。")]),t._v(" "),s("p",[t._v("序列中的元素求值是惰性的。因此，可以使用序列更高效地对集合元素执行链式操作，而不需要创建额外的集合来保存过程中产生的中间结果。")]),t._v(" "),s("p",[t._v("可以调用扩展函数"),s("code",[t._v("asSequence")]),t._v("把任意集合转换成序列，而序列可调用"),s("code",[t._v("toList()")]),t._v("来转换回列表。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("people"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("asSequence")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("filter")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("30")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("map")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("toList")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"序列的操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#序列的操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 序列的操作")]),t._v(" "),s("p",[t._v("序列的操作分为："),s("strong",[t._v("中间操作")]),t._v("和"),s("strong",[t._v("末端操作")]),t._v("。")]),t._v(" "),s("p",[t._v("中间操作返回的是另一个序列，这个新序列知道如何变换原始序列中的元素。")]),t._v(" "),s("p",[t._v("末端操作返回的是一个结果，这个结果可能是集合、元素、数字或其他从初始集合的变换序列中获取的任意对象。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/15195672221197/15196989045845.jpg",alt:"序列的操作-w358"}})]),t._v(" "),s("p",[t._v("中间操作始终是惰性的。例如，执行下面的一段代码，并不会在控制台上输出任何内容，这意味着map和filter被延期了。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token function"}},[t._v("listOf")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("4")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("asSequence")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("map")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("print")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"map('),s("span",{attrs:{class:"token interpolation variable"}},[t._v("$it")]),t._v(') "')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" it "),s("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" it "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("filter")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("print")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"filter('),s("span",{attrs:{class:"token interpolation variable"}},[t._v("$it")]),t._v(') "')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" it "),s("span",{attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("末端操作触发执行所有的延期计算。例如，在上面一段代码的最后加上"),s("code",[t._v(".toList()")]),t._v("才会触发map和filter。")]),t._v(" "),s("p",[t._v("集合的函数式API是"),s("strong",[t._v("按照操作顺序")]),t._v("，第一个操作处理完所有元素后再进行下一个操作，而序列不一样。序列是"),s("strong",[t._v("按照元素顺序")]),t._v("，处理完第一个元素的所有操作，再进行下一个元素。例如，比较上面一段代码在集合和序列上的执行顺序。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("集合的执行顺序为："),s("code",[t._v("map(1) map(2) map(3) map(4) filter(1) filter(4) filter(9) filter(16)")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("序列的执行顺序为："),s("code",[t._v("map(1) filter(1) map(2) filter(4) map(3) filter(9) map(4) filter(16)")]),t._v("。")])])]),t._v(" "),s("p",[t._v("序列这种按照元素顺序来执行的好处可以通过map加find操作体现。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("// 集合")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("listOf")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("4")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("map")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it "),s("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" it "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("find")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it "),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("// 序列")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("listOf")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("4")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("asSequence")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("map")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it "),s("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" it "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("find")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it "),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[s("img",{attrs:{src:"/15195672221197/15197002472447.jpg",alt:"序列的惰性求值的优势-w373"}})]),t._v(" "),s("h3",{attrs:{id:"创建序列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建序列","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建序列")]),t._v(" "),s("p",[t._v("在集合上调用"),s("code",[t._v("asSequence()")]),t._v("创建序列。")]),t._v(" "),s("p",[t._v("也可以使用"),s("code",[t._v("generateSequence")]),t._v("函数来创建序列。它接收两个参数，第一个为序列中的前一个元素，第二个为计算出下一个元素的函数。")]),t._v(" "),s("p",[t._v("使用generateSequence计算100以内所有自然数之和。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("// （中间操作）序列的第一个元素为0，之后的元素为前一个元素+1")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" naturalNumbers "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("generateSequence")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("// （中间操作）少于等于100的元素")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" numbersTo100 "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" naturalNumbers"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("takeWhile")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it "),s("span",{attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("100")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("// （末端操作）计算这个序列所有元素的和")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("println")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbersTo100"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("sum")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 5050")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("如果元素的父元素和它的类型相同（比如人类或文件），可以使用generateSequence来创建一个由它所有祖先组成的序列。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" File"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("getRootDir")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    "),s("span",{attrs:{class:"token function"}},[t._v("generateSequence")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parentFile "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 一个不断向上遍历父目录的序列")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("find")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parentFile "),s("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 当找到首个父目录为空的就停止，即是根目录")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"java函数式接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java函数式接口","aria-hidden":"true"}},[t._v("#")]),t._v(" Java函数式接口")]),t._v(" "),s("p",[t._v("Kotlin的lambda可以无缝地和Java API互操作。")]),t._v(" "),s("p",[t._v("函数式接口是指只有一个抽象方法的接口。它也被称为SAM接口，SAM是Single Abstract Method的缩写。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("OnClickListener")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("onClick")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("View v"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"lambda作为参数传递给java方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lambda作为参数传递给java方法","aria-hidden":"true"}},[t._v("#")]),t._v(" lambda作为参数传递给Java方法")]),t._v(" "),s("p",[t._v("Kotlin允许你在调用函数式接口作为参数的方法时使用lambda作为实参。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("button"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("setOnClickListener")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("OnClickListener")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("onClick")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("View v"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("button"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("setOnClickListener")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" view "),s("span",{attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("..")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("上面第一种方案，通过显式地创建一个实现了OnClickListener接口的匿名对象，每次调用都会创建一个新的实例。而第二种方案，如果lambda没有访问任何来自定义它的函数的变量，相应的匿名类实例可以在多次调用之间重用。但如果lambda从包围它的作用域中捕捉了变量，每次调用就不再重用同一个实例了。")]),t._v(" "),s("h3",{attrs:{id:"显式地把lambda转换成sam接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#显式地把lambda转换成sam接口","aria-hidden":"true"}},[t._v("#")]),t._v(" 显式地把lambda转换成SAM接口")]),t._v(" "),s("p",[t._v("大多数情况下，从lambda到SAM接口实例的转换都是自动发生的，但也存在需要显式地执行转换的情况。例如，如果有一个方法返回的是SAM接口实例，不能直接返回一个lambda，要用SAM构造方法把它包装起来。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("createToastListener")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" OnClickListener "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" OnClickListener "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("println")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"click"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("SAM构造方法只接收一个参数 —— 被用作函数式接口单抽象方法体的lambda，而且SAM构造方法会返回实现了这个接口的类的一个实例。")]),t._v(" "),s("h3",{attrs:{id:"lambda和this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lambda和this","aria-hidden":"true"}},[t._v("#")]),t._v(" lambda和this")]),t._v(" "),s("p",[t._v("注意，lambda中的this引用指向的是包围它的类，没有办法引用到lambda转换成的匿名类实例。从编译器的角度来看，lambda是一个代码块，不是一个对象。")]),t._v(" "),s("p",[t._v("如果你的事件监听器在处理事件时还需要取消自己，不能使用lambda，要使用实现了接口的匿名对象等。因为在匿名对象内，this关键字指向该对象实例，可以把它传给移除监听器的API。")]),t._v(" "),s("h2",{attrs:{id:"带接收者的lambda"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#带接收者的lambda","aria-hidden":"true"}},[t._v("#")]),t._v(" 带接收者的lambda")]),t._v(" "),s("p",[t._v("最常用的带接收者的lambda就是"),s("code",[t._v("with")]),t._v("函数和"),s("code",[t._v("apply")]),t._v("函数。")]),t._v(" "),s("h3",{attrs:{id:"with函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#with函数","aria-hidden":"true"}},[t._v("#")]),t._v(" with函数")]),t._v(" "),s("p",[t._v("很多语言都有这样的语句，可以用它对同一个对象执行多次操作，而不需要反复把对象的名称写出来。Kotlin利用标准库函数"),s("code",[t._v("with")]),t._v("来实现，而不是某种特殊的语言结构。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" result "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("StringBuilder")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nresult"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("append")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"I"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nresult"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("append")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"am"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nresult"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("append")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"daking"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" result "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("StringBuilder")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("with")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token function"}},[t._v("append")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"I"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 相当于result.append()")]),t._v("\n    "),s("span",{attrs:{class:"token function"}},[t._v("append")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"am"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token function"}},[t._v("append")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"daking"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[s("code",[t._v("with")]),t._v("结构看起来像是一种特殊的语法结构，但它实际上是一个接收两个参数的函数：一个"),s("strong",[t._v("对象")]),t._v("和一个"),s("strong",[t._v("lambda")]),t._v("。利用lambda可放在括号外的约定，让整个调用看起来就像是内建的语言功能。")]),t._v(" "),s("p",[s("code",[t._v("with")]),t._v("函数会把它的第一个参数（对象）转换成第二个参数（lambda）的接收者。"),s("strong",[t._v("在lambda中可以显式地通过this引用来访问这个接收者")]),t._v("。另外，"),s("strong",[t._v("可以省略this")]),t._v("引用，不用任何限定符直接访问这个接收者的方法和属性。")]),t._v(" "),s("p",[t._v("如果接收者的方法名和定义"),s("code",[t._v("with")]),t._v("的外部类的方法名相同，可通过"),s("code",[t._v("this.方法名()")]),t._v("和"),s("code",[t._v("this@外部类名.方法名()")]),t._v("来区分。")]),t._v(" "),s("p",[s("code",[t._v("with")]),t._v("返回的值是执行lambda代码的结果，该结果是lambda中的最后一个表达式的值。")]),t._v(" "),s("h3",{attrs:{id:"apply函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#apply函数","aria-hidden":"true"}},[t._v("#")]),t._v(" apply函数")]),t._v(" "),s("p",[s("code",[t._v("apply")]),t._v("函数几乎和"),s("code",[t._v("with")]),t._v("函数一模一样，唯一的区别是"),s("code",[t._v("apply")]),t._v("始终会返回作为实参传递给它的对象，即"),s("code",[t._v("apply")]),t._v("始终返回接收者对象。")]),t._v(" "),s("p",[s("code",[t._v("apply")]),t._v("被声明成一个"),s("strong",[t._v("扩展函数")]),t._v("，它的接收者会变成作为实参的lambda的接收者。可在任意对象上使用"),s("code",[t._v("apply")]),t._v("函数。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" result "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("StringBuilder")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("apply")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token function"}},[t._v("append")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"I"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token function"}},[t._v("append")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"am"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token function"}},[t._v("append")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"daking"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("toString")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[s("code",[t._v("apply")]),t._v("函数让你可使用Builder风格的API创建和初始化任何对象。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("createCommonTextView")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Context"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" \n    "),s("span",{attrs:{class:"token function"}},[t._v("TextView")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("apply")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        text "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"Text"')]),t._v("\n        textSize "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("20.0")]),t._v("\n        "),s("span",{attrs:{class:"token function"}},[t._v("setPadding")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("10")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])])])}],!1,null,null,null);e.options.__file="Lambda编程.md";a.default=e.exports}}]);