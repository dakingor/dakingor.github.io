(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{181:function(t,e,a){"use strict";a.r(e);var l=a(0),i=Object(l.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"设计模式基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计模式基础","aria-hidden":"true"}},[t._v("#")]),t._v(" 设计模式基础")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#面向对象的六大原则"}},[t._v("面向对象的六大原则")]),a("ul",[a("li",[a("a",{attrs:{href:"#单一职责原则"}},[t._v("单一职责原则")])]),a("li",[a("a",{attrs:{href:"#开闭原则"}},[t._v("开闭原则")])]),a("li",[a("a",{attrs:{href:"#里氏替换原则"}},[t._v("里氏替换原则")])]),a("li",[a("a",{attrs:{href:"#依赖倒置原则"}},[t._v("依赖倒置原则")])]),a("li",[a("a",{attrs:{href:"#接口隔离原则"}},[t._v("接口隔离原则")])]),a("li",[a("a",{attrs:{href:"#迪米特原则"}},[t._v("迪米特原则")])])])]),a("li",[a("a",{attrs:{href:"#设计模式的分类"}},[t._v("设计模式的分类")]),a("ul",[a("li",[a("a",{attrs:{href:"#创建型模式"}},[t._v("创建型模式")])]),a("li",[a("a",{attrs:{href:"#结构型模式"}},[t._v("结构型模式")])]),a("li",[a("a",{attrs:{href:"#行为型模式"}},[t._v("行为型模式")])])])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"面向对象的六大原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象的六大原则","aria-hidden":"true"}},[t._v("#")]),t._v(" 面向对象的六大原则")]),t._v(" "),a("h3",{attrs:{id:"单一职责原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单一职责原则","aria-hidden":"true"}},[t._v("#")]),t._v(" 单一职责原则")]),t._v(" "),a("p",[t._v("名称：Single Responsibility Principle(SRP)。")]),t._v(" "),a("p",[t._v("定义：一个类，应该仅有一个引起它变化的原因。简单来说，一个类中应该是一组相关性很高的函数、数据的封装。")]),t._v(" "),a("h3",{attrs:{id:"开闭原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开闭原则","aria-hidden":"true"}},[t._v("#")]),t._v(" 开闭原则")]),t._v(" "),a("p",[t._v("名称：Open Close Principle(OCP)。")]),t._v(" "),a("p",[t._v("定义：软件中的对象(类、模块、函数等)应该"),a("strong",[t._v("对于扩展是开放的，但对于修改是封闭的")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"里氏替换原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#里氏替换原则","aria-hidden":"true"}},[t._v("#")]),t._v(" 里氏替换原则")]),t._v(" "),a("p",[t._v("名称：Liskov Substitution Principle(LSP)。")]),t._v(" "),a("p",[t._v("定义：所有引用基类的地方必须能透明地使用其子类的对象。")]),t._v(" "),a("p",[t._v("此原则主要体现面向对象的“"),a("strong",[t._v("继承")]),t._v("”特征。为了保证这种透明的无差别使用，子类在实现时不应该随意地重写父类已定义好的非抽象方法。")]),t._v(" "),a("h3",{attrs:{id:"依赖倒置原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#依赖倒置原则","aria-hidden":"true"}},[t._v("#")]),t._v(" 依赖倒置原则")]),t._v(" "),a("p",[t._v("名称：Dependence Inversion Principle(DIP)。")]),t._v(" "),a("p",[t._v("定义：一种特定的解耦形式，使得高层次模块不依赖于低层次模块的实现细节。")]),t._v(" "),a("p",[t._v("模块之间不应该直接产生调用关系，而应该依赖抽象(接口或抽象类)。抽象不应该依赖实现细节，而是实现细节依赖抽象。即"),a("strong",[t._v("面向接口编程")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"接口隔离原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口隔离原则","aria-hidden":"true"}},[t._v("#")]),t._v(" 接口隔离原则")]),t._v(" "),a("p",[t._v("名称：Interface Segregation Principle(ISP)。")]),t._v(" "),a("p",[t._v("定义：类间的依赖关系应该建立在最小的接口上。")]),t._v(" "),a("p",[t._v("若一个接口定义得过于臃肿，则代表它的每一个实现类都要考虑所有的实现逻辑，这无形中增加了实现类的负担。")]),t._v(" "),a("h3",{attrs:{id:"迪米特原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迪米特原则","aria-hidden":"true"}},[t._v("#")]),t._v(" 迪米特原则")]),t._v(" "),a("p",[t._v("名称：Law of Demeter(LOD)。又称为"),a("strong",[t._v("最少知识原则")]),t._v("(Least Knowledge Principle)。")]),t._v(" "),a("p",[t._v("定义：一个对象应该对其他对象有最少的了解。")]),t._v(" "),a("p",[t._v("此原则体现的是“"),a("strong",[t._v("高内聚，低耦合")]),t._v("”的思想。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("高内聚：将实现逻辑都封装在类的内部，对public方法以外的信息，不轻易暴露给外界。")])]),t._v(" "),a("li",[a("p",[t._v("低耦合：不要让一个类依赖过多的类。而且一个类对于自己依赖的类，知道得越少越好。")])])]),t._v(" "),a("h2",{attrs:{id:"设计模式的分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的分类","aria-hidden":"true"}},[t._v("#")]),t._v(" 设计模式的分类")]),t._v(" "),a("p",[t._v("设计模式主要分为三大类：创建型、结构性和行为型。")]),t._v(" "),a("h3",{attrs:{id:"创建型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建型模式")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("中文名")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("英文名")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("单例模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Singleton")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("建造者模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Builder")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("原型模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Prototype")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("工厂方法模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Factory Method")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("抽象工厂模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Abstract Factory")])])])]),t._v(" "),a("h3",{attrs:{id:"结构型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 结构型模式")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("中文名")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("英文名")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("适配器模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Adapter")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("代理模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Proxy")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("装饰者模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Decorator")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("外观模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Facade")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("桥接模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Bridge")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("组合模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Composite")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("享元模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Flyweight")])])])]),t._v(" "),a("h3",{attrs:{id:"行为型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行为型模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 行为型模式")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("中文名")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("英文名")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("策略模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Strategy")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("模板方法模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Template Method")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("观察者模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Observer")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("迭代器模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Iterator")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("责任链模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Chain of Responsibility")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("命令模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Command")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("备忘录模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Memento")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("状态模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("State")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("访问者模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Visitor")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("中介者模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Mediator")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("解释器模式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Interpreter")])])])])])}],!1,null,null,null);i.options.__file="设计模式基础.md";e.default=i.exports}}]);