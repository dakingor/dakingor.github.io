(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{211:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"运算符重载及其他约定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符重载及其他约定","aria-hidden":"true"}},[t._v("#")]),t._v(" 运算符重载及其他约定")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#kotlin约定"}},[t._v("Kotlin约定")])]),a("li",[a("a",{attrs:{href:"#运算符重载"}},[t._v("运算符重载")])]),a("li",[a("a",{attrs:{href:"#重载算术运算符"}},[t._v("重载算术运算符")]),a("ul",[a("li",[a("a",{attrs:{href:"#重载二元算术运算"}},[t._v("重载二元算术运算")])]),a("li",[a("a",{attrs:{href:"#重载复合赋值运算符"}},[t._v("重载复合赋值运算符")])]),a("li",[a("a",{attrs:{href:"#重载一元运算符"}},[t._v("重载一元运算符")])])])]),a("li",[a("a",{attrs:{href:"#重载比较运算符"}},[t._v("重载比较运算符")]),a("ul",[a("li",[a("a",{attrs:{href:"#等号运算符"}},[t._v("等号运算符")])]),a("li",[a("a",{attrs:{href:"#排序运算符"}},[t._v("排序运算符")])])])]),a("li",[a("a",{attrs:{href:"#集合与区间的约定"}},[t._v("集合与区间的约定")]),a("ul",[a("li",[a("a",{attrs:{href:"#下标约定"}},[t._v("下标约定")])]),a("li",[a("a",{attrs:{href:"#in约定"}},[t._v("in约定")])]),a("li",[a("a",{attrs:{href:"#rangto约定"}},[t._v("rangTo约定")])]),a("li",[a("a",{attrs:{href:"#for循环中的iterator约定"}},[t._v("for循环中的iterator约定")])])])]),a("li",[a("a",{attrs:{href:"#解构声明和组件函数"}},[t._v("解构声明和组件函数")])]),a("li",[a("a",{attrs:{href:"#委托属性"}},[t._v("委托属性")]),a("ul",[a("li",[a("a",{attrs:{href:"#委托属性的基本操作"}},[t._v("委托属性的基本操作")])]),a("li",[a("a",{attrs:{href:"#惰性初始化和-by-lazy"}},[t._v("惰性初始化和by lazy()")])]),a("li",[a("a",{attrs:{href:"#委托属性的变换规则"}},[t._v("委托属性的变换规则")])]),a("li",[a("a",{attrs:{href:"#map与委托属性"}},[t._v("map与委托属性")])])])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"kotlin约定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kotlin约定","aria-hidden":"true"}},[t._v("#")]),t._v(" Kotlin约定")]),t._v(" "),a("p",[t._v("Java在标准库中有一些与特定的类相关联的语言特性。例如，实现了"),a("code",[t._v("java.lang.Iterable")]),t._v("接口的对象可以在for循环中使用。")]),t._v(" "),a("p",[t._v("在Kotlin中，也有类似的约定，但这些功能与特定的函数命名相关，而不是与特定的类型绑定。例如，在类中定义一个名为"),a("code",[t._v("plus")]),t._v("的特殊方法，那么按照约定，就可以在该类的实例上使用"),a("code",[t._v("+")]),t._v("运算符。")]),t._v(" "),a("h2",{attrs:{id:"运算符重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符重载","aria-hidden":"true"}},[t._v("#")]),t._v(" 运算符重载")]),t._v(" "),a("p",[t._v("用于重载运算符的所有函数都需要用"),a("code",[t._v("operator")]),t._v("关键字来标记，用来表示你打算把这个函数作为相应的约定的实现。")]),t._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("data")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Point")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" x"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" y"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("plus")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("other"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Point"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Point "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Point")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" other"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" other"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("运算符的运算会自动转换成对应函数的调用。例如，"),a("code",[t._v("point1 + point2")]),t._v("会自动转换成"),a("code",[t._v("point1.plus(point2)")]),t._v("。")]),t._v(" "),a("p",[t._v("除了把这个运算符声明为一个成员函数外，也可以把它定义为一个扩展函数。")]),t._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" Point"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("plus")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("other"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Point"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Point "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Point")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" other"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" other"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("Kotlin限定了你能重载哪些运算符，以及你需要在你的类中定义的对应名字的函数。")]),t._v(" "),a("p",[t._v("自定义类型的运算符，基本上和标准数字类型的运算符有着相同的优先级。")]),t._v(" "),a("p",[t._v("定义一个运算符时，不要求两个运算符是相同的类型。")]),t._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" Point"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("times")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("scale"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Double"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Point "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Point")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" scale"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("toInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xy"),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" scale"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("toInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("Kotlin运算符不会自动支持交换性。例如，"),a("code",[t._v("point * 1.5")]),t._v("是正确的，而"),a("code",[t._v("1.5 * point")]),t._v("是无效的。除非定义一个"),a("code",[t._v("operator fun Double.plus(p: Point): Point")]),t._v("。")]),t._v(" "),a("p",[t._v("运算符函数的返回类型可以不同于任一运算数类型。")]),t._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" Char"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("times")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("toString")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("repeat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("和普通函数一样，可以重载operator函数。")]),t._v(" "),a("h2",{attrs:{id:"重载算术运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重载算术运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 重载算术运算符")]),t._v(" "),a("h3",{attrs:{id:"重载二元算术运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重载二元算术运算","aria-hidden":"true"}},[t._v("#")]),t._v(" 重载二元算术运算")]),t._v(" "),a("p",[t._v("可重载的二元算术运算符。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("表达式")]),t._v(" "),a("th",[t._v("函数名")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("a * b")])]),t._v(" "),a("td",[t._v("times")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("a / b")])]),t._v(" "),a("td",[t._v("div")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("a % b")])]),t._v(" "),a("td",[t._v("mod")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("a + b")])]),t._v(" "),a("td",[t._v("plus")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("a - b")])]),t._v(" "),a("td",[t._v("minus")])])])]),t._v(" "),a("p",[t._v("Kotlin没有为标准数字类型定义任何位运算符，也不允许你来定义它们。以下为Kotlin提供的用于执行位运算的完整函数列表（只用于Int和Long）：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("表达式")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("a shl 2")])]),t._v(" "),a("td",[t._v("带符号左移")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("a shr 2")])]),t._v(" "),a("td",[t._v("带符号右移")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("a ushr 2")])]),t._v(" "),a("td",[t._v("无符号右移")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("a and b")])]),t._v(" "),a("td",[t._v("按位与")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("a or b")])]),t._v(" "),a("td",[t._v("按位或")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("a xor b")])]),t._v(" "),a("td",[t._v("按位异或")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("a inv b")])]),t._v(" "),a("td",[t._v("按位取反")])])])]),t._v(" "),a("h3",{attrs:{id:"重载复合赋值运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重载复合赋值运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 重载复合赋值运算符")]),t._v(" "),a("p",[t._v("Kotlin不止支持"),a("code",[t._v("+")]),t._v("等运算符，也支持"),a("code",[t._v("+=")]),t._v("等复合赋值运算符。")]),t._v(" "),a("p",[a("code",[t._v("+=")]),t._v("运算符对应的函数名为"),a("code",[t._v("plusAssign")]),t._v("，其他二元算术运算符也有命名相似的对应函数，如"),a("code",[t._v("minusAssign")]),t._v("。")]),t._v(" "),a("p",[t._v("注意，当使用"),a("code",[t._v("+=")]),t._v("时，如果同时定义了"),a("code",[t._v("plus")]),t._v("和"),a("code",[t._v("plusAssign")]),t._v("且它们都适用，编译器会报错。但Kotlin标准库支持集合类同时定义这两种函数：\n"),a("code",[t._v("+")]),t._v("总是返回一个新的集合。\n"),a("code",[t._v("+=")]),t._v("用于可变集合时，始终在一个地方修改原集合。而"),a("code",[t._v("+=")]),t._v("用于只读集合时，会返回一个修改过的副本。")]),t._v(" "),a("h3",{attrs:{id:"重载一元运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重载一元运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 重载一元运算符")]),t._v(" "),a("p",[t._v("可重载的一元运算符。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("表达式")]),t._v(" "),a("th",[t._v("函数名")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("+a")])]),t._v(" "),a("td",[t._v("unaryPlus")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("-a")])]),t._v(" "),a("td",[t._v("unaryMinus")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("!a")])]),t._v(" "),a("td",[t._v("not")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("++a")]),t._v("或"),a("code",[t._v("a++")])]),t._v(" "),a("td",[t._v("inc")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("--a")]),t._v("或"),a("code",[t._v("a--")])]),t._v(" "),a("td",[t._v("dec")])])])]),t._v(" "),a("h2",{attrs:{id:"重载比较运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重载比较运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 重载比较运算符")]),t._v(" "),a("h3",{attrs:{id:"等号运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#等号运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 等号运算符")]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("==")]),t._v("和"),a("code",[t._v("!=")]),t._v("运算符会被转换成"),a("code",[t._v("equals")]),t._v("函数的调用，且它们可用于可空运算数。")]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("a == b")]),t._v("相当于执行"),a("code",[t._v("a?.equals(b) ?: (b == null)")]),t._v("。")]),t._v(" "),a("p",[t._v("不同于其他约定，因为"),a("code",[t._v("equals")]),t._v("函数是在Any类中定义的，所以你重新定义该函数时要使用"),a("code",[t._v("override")]),t._v("来标记。")]),t._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Point")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" x"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" y"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("equals")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Any"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Boolean "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("// ===为恒等运算符，此处用它来优化。另外，此运算符不可被重载")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token keyword"}},[t._v("is")]),t._v(" Point"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" y\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("另外，"),a("code",[t._v("equals")]),t._v("不能实现为扩展函数，因为继承自Any类的实现始终优先于扩展函数。")]),t._v(" "),a("h3",{attrs:{id:"排序运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排序运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 排序运算符")]),t._v(" "),a("p",[t._v("Kotlin支持Comparable接口，其"),a("code",[t._v("compareTo")]),t._v("方法可以按约定调用，即比较运算符（>, <, <=, >=）的使用将会转换成"),a("code",[t._v("compareTo")]),t._v("的调用。")]),t._v(" "),a("p",[a("code",[t._v("a >= b")]),t._v("相当于"),a("code",[t._v("a.compareTo(b) >= 0")]),t._v("。")]),t._v(" "),a("p",[t._v("重写"),a("code",[t._v("compareTo")]),t._v("时，可在其中使用Kotlin标准库中的"),a("code",[t._v("compareValueBy")]),t._v("函数来简洁地实现。")]),t._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Person")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" firstName"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" lastName"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Comparable"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Person"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("compareTo")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("other"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Person"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("// 比较this和other，先比较它们的lastName，后比较它们的firstName")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("compareValueBy")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" other"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Person"),a("span",{attrs:{class:"token operator"}},[t._v("::")]),t._v("lastName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Person"),a("span",{attrs:{class:"token operator"}},[t._v("::")]),t._v("firstName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[a("code",[t._v("compareValueBy")]),t._v("函数接收用来计算比较值的一系列回调，按顺序依次调用回调方法，如果值不同，则返回比较结果；如果相同，则继续调用下一个；如果没有更多回调，则返回0。这些回调可以是lambda或属性等。")]),t._v(" "),a("h2",{attrs:{id:"集合与区间的约定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合与区间的约定","aria-hidden":"true"}},[t._v("#")]),t._v(" 集合与区间的约定")]),t._v(" "),a("h3",{attrs:{id:"下标约定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#下标约定","aria-hidden":"true"}},[t._v("#")]),t._v(" 下标约定")]),t._v(" "),a("p",[t._v("使用下标运算符读取元素会被转换为"),a("code",[t._v("get")]),t._v("方法的调用，并且写入元素将调用"),a("code",[t._v("set")]),t._v("方法。")]),t._v(" "),a("pre",[a("code",[t._v("`x[a]`相当于`x.get(a)`。\n\n`x[a] = b`相当于`x.set(a, b)`。\n")])]),t._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" Point"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("get")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("when")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("->")]),t._v(" x\n        "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("->")]),t._v(" y\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("IndexOutOfBoundsException")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Invalid coordinate '),a("span",{attrs:{class:"token interpolation variable"}},[t._v("$index")]),t._v('"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("键参数的类型可以是任何类型，而不只是Int。")]),t._v(" "),a("h3",{attrs:{id:"in约定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#in约定","aria-hidden":"true"}},[t._v("#")]),t._v(" in约定")]),t._v(" "),a("p",[t._v("集合中的in运算符，用于检查某个对象是否属于集合，实质上是调用了集合的"),a("code",[t._v("contains")]),t._v("函数。例如，"),a("code",[t._v("a in c")]),t._v("相当于"),a("code",[t._v("c.contains(a)")]),t._v("。")]),t._v(" "),a("p",[t._v("判断a是否在"),a("code",[t._v("[1, 10)")]),t._v("之间，可使用"),a("code",[t._v("a in 1 until 10")]),t._v("（其中"),a("strong",[t._v("until")]),t._v("为Kotlin标准库中的函数，用于创建一个"),a("strong",[t._v("开区间")]),t._v("）。")]),t._v(" "),a("h3",{attrs:{id:"rangto约定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rangto约定","aria-hidden":"true"}},[t._v("#")]),t._v(" rangTo约定")]),t._v(" "),a("p",[t._v("可使用"),a("code",[t._v("..")]),t._v("来创建一个"),a("strong",[t._v("闭区间")]),t._v("，实质上是调用"),a("code",[t._v("rangTo")]),t._v("函数。例如，"),a("code",[t._v("start..end")]),t._v("相当于"),a("code",[t._v("start.rangTo(end)")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"for循环中的iterator约定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for循环中的iterator约定","aria-hidden":"true"}},[t._v("#")]),t._v(" for循环中的iterator约定")]),t._v(" "),a("p",[a("code",[t._v("for (a in b) {...}")]),t._v("将被转换成"),a("code",[t._v("b.iterator()")]),t._v("，然后重复调用其"),a("code",[t._v("hasNext()")]),t._v("和"),a("code",[t._v("next()")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"解构声明和组件函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解构声明和组件函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 解构声明和组件函数")]),t._v(" "),a("p",[t._v("解构声明允许你展开单个复合值，并使用它来初始化多个单独的变量。")]),t._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" p "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Point")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("20")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" p\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("要在解构声明中初始化每个变量，将调用名为"),a("code",[t._v("componentN")]),t._v("的函数，其中N为声明中变量的位置。例如，"),a("code",[t._v("val (x, y) = p")]),t._v("相当于执行如下操作：")]),t._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" a "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("component1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" b "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("component2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("编译器会为"),a("code",[t._v("data class")]),t._v("的主构造方法中声明的属性生成一个"),a("code",[t._v("componentN")]),t._v("的函数。")]),t._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Point")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" x"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" y"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("component1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" x\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("component2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" y\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("标准库只允许此语法来访问一个对象的前5个元素。")]),t._v(" "),a("p",[t._v("用解构声明来遍历map。")]),t._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" map"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("println")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token interpolation variable"}},[t._v("$key")]),t._v(" -> "),a("span",{attrs:{class:"token interpolation variable"}},[t._v("$value")]),t._v('"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entry "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" map"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("entries"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" key "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" entry"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("component1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" entry"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("component2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h2",{attrs:{id:"委托属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#委托属性","aria-hidden":"true"}},[t._v("#")]),t._v(" 委托属性")]),t._v(" "),a("h3",{attrs:{id:"委托属性的基本操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#委托属性的基本操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 委托属性的基本操作")]),t._v(" "),a("p",[t._v("委托属性的基本语法如下，属性p将它的访问器逻辑委托给了Delegate类的一个实例对象。")]),t._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" Foo "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Type "),a("span",{attrs:{class:"token keyword"}},[t._v("by")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Delegate")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("关键字by对它后面的表达式求值来获得属性的委托对象。")]),t._v(" "),a("p",[t._v("Delegate类必须具有"),a("code",[t._v("getValue")]),t._v("和"),a("code",[t._v("setValue")]),t._v("方法（后者仅适用于可变属性）。这两个方法可以是成员函数，也可以是扩展函数。")]),t._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" Delegate "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getValue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("..")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token operator"}},[t._v("..")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("setValue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("..")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Type"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token operator"}},[t._v("..")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h3",{attrs:{id:"惰性初始化和by-lazy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#惰性初始化和by-lazy","aria-hidden":"true"}},[t._v("#")]),t._v(" 惰性初始化和"),a("code",[t._v("by lazy()")])]),t._v(" "),a("p",[t._v("惰性初始化是一种常见的模式，直到在第一次访问该属性时，才根据需要创建对象的一部分。")]),t._v(" "),a("p",[t._v("例如，在首次访问一个人的邮件列表时，才加载他的邮件列表。")]),t._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Person")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" name"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" _emails"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" List"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Email"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" emails"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" List"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Email"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("get")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_emails "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                _emails "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("loadEmails")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" _emails"),a("span",{attrs:{class:"token operator"}},[t._v("!!")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v("上面的解决方案，代码啰嗦，而且不是线程安全的。可利用Kotlin的"),a("code",[t._v("lazy")]),t._v("函数加上关键字by来创建委托属性。")]),t._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Person")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" name"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" emails "),a("span",{attrs:{class:"token keyword"}},[t._v("by")]),t._v(" lazy "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("loadEmails")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[a("code",[t._v("lazy")]),t._v("函数的参数为一个lambda，并返回一个具有"),a("code",[t._v("getValue")]),t._v("方法的对象。之后把这个对象与by关键字一起创建一个委托属性。默认情况下，"),a("code",[t._v("lazy")]),t._v("函数是线程安全的。")]),t._v(" "),a("h3",{attrs:{id:"委托属性的变换规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#委托属性的变换规则","aria-hidden":"true"}},[t._v("#")]),t._v(" 委托属性的变换规则")]),t._v(" "),a("p",[t._v("假设有一个具有委托属性的类。")]),t._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" C "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" prop"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Type "),a("span",{attrs:{class:"token keyword"}},[t._v("by")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("MyDelegate")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("关键字by后接的表达式求值后得到的对象会被保存在一个名为"),a("code",[t._v("<delegate>")]),t._v("的隐藏属性中。编译器也将用一个KProperty类型的对象来代表这个属性，它被称为"),a("code",[t._v("<property>")]),t._v("。")]),t._v(" "),a("p",[t._v("编译器生成的代码如下：")]),t._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" C "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("delegate"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("MyDelegate")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" prop"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Type\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("get")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("delegate"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("getValue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("property"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Type"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("property"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("setValue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("property"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[a("code",[t._v("val x = c.prop")]),t._v("相当于"),a("code",[t._v("val x = <delegate>.getValue(c, <property>)")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("c.prop = x")]),t._v("相当于"),a("code",[t._v("<property>.setValue(c, <property>, x)")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"map与委托属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map与委托属性","aria-hidden":"true"}},[t._v("#")]),t._v(" map与委托属性")]),t._v(" "),a("p",[t._v("Kotlin标准库在标准Map和MutableMap接口上定义了getValue和setValue扩展函数，于是，委托属性可以使用任意map来作为属性委托，来灵活地处理具有可变属性集的对象。")]),t._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" Person "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" _attributes "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" hashMapOf"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("String"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" String"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("setAttribute")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrName"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        _attributes"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("attrName"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[t._v("val")]),t._v(" name"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),a("span",{attrs:{class:"token keyword"}},[t._v("by")]),t._v(" _attributes\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("委托属性的名称将自动用作在map中的键，属性值作为map中的值。")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("person.name")]),t._v("相当于"),a("code",[t._v('_attributes["name"]')]),t._v("。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v('person.name = "daking"')]),t._v("相当于"),a("code",[t._v('_attributes["name"] = "daking"')]),t._v("。")])])])])}],!1,null,null,null);e.options.__file="运算符重载及其他约定.md";s.default=e.exports}}]);