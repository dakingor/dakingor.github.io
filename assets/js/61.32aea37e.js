(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{205:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"kotlin语法基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kotlin语法基础","aria-hidden":"true"}},[s._v("#")]),s._v(" Kotlin语法基础")]),s._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#基本元素"}},[s._v("基本元素")]),a("ul",[a("li",[a("a",{attrs:{href:"#函数"}},[s._v("函数")])]),a("li",[a("a",{attrs:{href:"#语句和表达式"}},[s._v("语句和表达式")])]),a("li",[a("a",{attrs:{href:"#变量"}},[s._v("变量")])]),a("li",[a("a",{attrs:{href:"#字符串模板"}},[s._v("字符串模板")])]),a("li",[a("a",{attrs:{href:"#as与is"}},[s._v("as与is")])])])]),a("li",[a("a",{attrs:{href:"#类和属性"}},[s._v("类和属性")]),a("ul",[a("li",[a("a",{attrs:{href:"#类"}},[s._v("类")])]),a("li",[a("a",{attrs:{href:"#属性"}},[s._v("属性")])]),a("li",[a("a",{attrs:{href:"#kotlin源码布局"}},[s._v("Kotlin源码布局")])])])]),a("li",[a("a",{attrs:{href:"#枚举和when"}},[s._v("枚举和when")]),a("ul",[a("li",[a("a",{attrs:{href:"#声明枚举类"}},[s._v("声明枚举类")])]),a("li",[a("a",{attrs:{href:"#使用when处理枚举类"}},[s._v("使用when处理枚举类")])]),a("li",[a("a",{attrs:{href:"#when允许使用任意对象"}},[s._v("when允许使用任意对象")])]),a("li",[a("a",{attrs:{href:"#不带参数的when"}},[s._v("不带参数的when")])]),a("li",[a("a",{attrs:{href:"#用when代替if"}},[s._v("用when代替if")])])])]),a("li",[a("a",{attrs:{href:"#迭代"}},[s._v("迭代")]),a("ul",[a("li",[a("a",{attrs:{href:"#while循环"}},[s._v("while循环")])]),a("li",[a("a",{attrs:{href:"#for循环"}},[s._v("for循环")])]),a("li",[a("a",{attrs:{href:"#区间和数列"}},[s._v("区间和数列")])]),a("li",[a("a",{attrs:{href:"#迭代map"}},[s._v("迭代map")])]),a("li",[a("a",{attrs:{href:"#in运算符"}},[s._v("in运算符")])])])]),a("li",[a("a",{attrs:{href:"#异常"}},[s._v("异常")]),a("ul",[a("li",[a("a",{attrs:{href:"#抛出异常"}},[s._v("抛出异常")])]),a("li",[a("a",{attrs:{href:"#处理异常"}},[s._v("处理异常")])])])])])]),a("p"),s._v(" "),a("h2",{attrs:{id:"基本元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本元素","aria-hidden":"true"}},[s._v("#")]),s._v(" 基本元素")]),s._v(" "),a("h3",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数","aria-hidden":"true"}},[s._v("#")]),s._v(" 函数")]),s._v(" "),a("p",[s._v("函数的声明以关键字fun开始，函数名称紧随其后，接下来是括号括起来的参数列表，之后是冒号隔开的返回类型，最后是大括号括起来的函数体。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("fun 函数名(参数列表): 返回类型 {\n    函数体\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("max")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" b"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" a "),a("span",{attrs:{class:"token keyword"}},[s._v("else")]),s._v(" b "),a("span",{attrs:{class:"token comment"}},[s._v("// 与Java中的三元运算符相似")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("如果某个函数的函数体只有单个表达式，可用这个表达式作为完整的函数体，并去掉花括号和return语句。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("max")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" b"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" a "),a("span",{attrs:{class:"token keyword"}},[s._v("else")]),s._v(" b\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("因为表达式函数体的返回类型可以进行推导，所以可进一步简化，省掉返回类型。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("max")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" b"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" a "),a("span",{attrs:{class:"token keyword"}},[s._v("else")]),s._v(" b\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"语句和表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语句和表达式","aria-hidden":"true"}},[s._v("#")]),s._v(" 语句和表达式")]),s._v(" "),a("p",[s._v("语句和表达式的区别是：表达式有值，并且能够作为另一个表达式的一部分使用；而语句总是包围着它的代码块中的顶层元素，并且没有自己的值。")]),s._v(" "),a("p",[s._v("在Java中，所有的控制结构都是语句。而在Kotlin中，"),a("strong",[s._v("除了循环")]),s._v("（for、do和do/while）以外，"),a("strong",[s._v("大多数控制结构都是表达式")]),s._v("。例如，if是表达式，而不是语句。")]),s._v(" "),a("p",[s._v("另外，Java中的"),a("strong",[s._v("赋值操作")]),s._v("是表达式，而在Kotlin中"),a("strong",[s._v("变成了语句")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量","aria-hidden":"true"}},[s._v("#")]),s._v(" 变量")]),s._v(" "),a("p",[s._v("Kotlin的变量声明是以关键字开始，然后是变量名称，最后是类型。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" name"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"daking"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("可省略类型声明，Kotlin会根据初始化器来判断变量的类型。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" name "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"daking"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("声明变量的关键字有两个：")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("val")]),s._v("（来自value）—— 不可变引用。使用val声明的变量不能在初始化之后再次赋值。它对应的是Java的final变量。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("var")]),s._v("（来自variable）—— 可变引用。这种变量的值可以被改变。它对应的是普通（非final）的Java变量。")])])]),s._v(" "),a("p",[s._v("默认情况下，应该尽可能地使用val关键字来声明所有的Kotlin变量，仅在必要的时间换成var。")]),s._v(" "),a("p",[s._v("在定义val变量的代码块执行期间，val变量只能进行唯一一次初始化。但如果编译器能确保只有唯一一条初始化语句会被执行，可根据条件使用不同的值来初始化它。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" message"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String\n"),a("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token function"}},[s._v("canPerformOperation")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    message "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"success"')]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    message "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"fail"')]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("尽管val引用自身是不可变的，但是它指向的对象可能是可变的。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" languages "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("arrayListOf")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"Java"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nlanguages"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("add")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"Kotlin"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("即使var关键字允许变量改变自己的值，但它的类型却是改变不了的。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" result "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("10")]),s._v("\nresult "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"xxx"')]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// 错误，类型不匹配")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"字符串模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串模板","aria-hidden":"true"}},[s._v("#")]),s._v(" 字符串模板")]),s._v(" "),a("p",[s._v("Kotlin允许你在字符串字面值中引用局部变量，只需要在变量名称前加上字符"),a("code",[s._v("$")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("String name "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"daking"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nString message "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"I am "')]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" name"),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" name "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"daking"')]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" message "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"I am '),a("span",{attrs:{class:"token interpolation variable"}},[s._v("$name")]),s._v('"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("还可以通过"),a("code",[s._v("${表达式}")]),s._v("方式在字符串字面值中引用表达式。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" message "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"I am '),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token delimiter variable"}},[s._v("${")]),s._v("people"),a("span",{attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{attrs:{class:"token delimiter variable"}},[s._v("}")])]),s._v('"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("还可以在双引号中直接嵌套双引号，只要它们处于某个表达式的范围内（即花括号内）。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" message "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"I am ${if (people.size > 0) people[0] else "')]),s._v("someone"),a("span",{attrs:{class:"token string"}},[s._v('" }"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"as与is"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#as与is","aria-hidden":"true"}},[s._v("#")]),s._v(" as与is")]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("as")]),s._v("关键字来进行特定类型的显式转换。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" p"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Person "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Student")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" s"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Student "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" p "),a("span",{attrs:{class:"token keyword"}},[s._v("as")]),s._v(" Student\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("使用"),a("code",[s._v("is")]),s._v("检查一个变量是否为指定类型。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p "),a("span",{attrs:{class:"token keyword"}},[s._v("is")]),s._v(" Student"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token function"}},[s._v("println")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"It is a student."')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("Kotlin会进行"),a("strong",[s._v("智能转换")]),s._v("：如果你检查过一个变量是某种类型，后面就不用再显式地转换它，可以直接把它当作你检查过的类型来使用。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p "),a("span",{attrs:{class:"token keyword"}},[s._v("is")]),s._v(" Student"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    p"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("study")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"类和属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类和属性","aria-hidden":"true"}},[s._v("#")]),s._v(" 类和属性")]),s._v(" "),a("h3",{attrs:{id:"类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类","aria-hidden":"true"}},[s._v("#")]),s._v(" 类")]),s._v(" "),a("p",[s._v("一个只有一个属性的简单JavaBean类，对比下Java和Kotlin关于类的不同写法。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("final")]),s._v(" String name"),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Person")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("String name"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("this")]),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[s._v("public")]),s._v(" String "),a("span",{attrs:{class:"token function"}},[s._v("getName")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" name"),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Person")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" name"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("在Kotlin中实例化一个类对象，不需要"),a("code",[s._v("new")]),s._v("关键字。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" person "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Person")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"daking"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性","aria-hidden":"true"}},[s._v("#")]),s._v(" 属性")]),s._v(" "),a("p",[s._v("在Java中，数据存储在"),a("strong",[s._v("字段")]),s._v("中，通常还是私有的。如果想让类的使用者访问到数据，得提供"),a("strong",[s._v("访问器")]),s._v("方法：一个getter，可能还有一个setter。")]),s._v(" "),a("p",[s._v("在Java中，字段和其访问器的组合常常被叫作"),a("strong",[s._v("属性")]),s._v("。而在Kotlin中，属性是头等的语言特性，完全代替了字段和访问器方法。")]),s._v(" "),a("p",[s._v("在Kotlin类中声明一个属性和声明一个变量一样：使用val或var关键字。声明成val的属性是只读的，而var属性是可读写的。")]),s._v(" "),a("p",[s._v("在Kotlin中，当你声明属性的时候，就声明了对应的访问器：val属性有一个getter，而var属性既有getter又有setter。访问器的默认实现非常简单：创建一个存储值的字段，以及返回值的getter和更新值的setter。若有需要，可声明自定义的访问器。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" person "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Person")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"xxx"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nperson"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"daking"')]),s._v("\n"),a("span",{attrs:{class:"token function"}},[s._v("println")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("person"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("Person person "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{attrs:{class:"token class-name"}},[s._v("Person")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"xxx"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nperson"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("setName")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"daking"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nSystem"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("println")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("person"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("getName")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("getter和setter的命名规则有一个例外：如果属性的名称以"),a("code",[s._v("is")]),s._v("开头，getter不会增加任何的前缀；而它的setter名称中的"),a("code",[s._v("is")]),s._v("会被替换成"),a("code",[s._v("set")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Person")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" name"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" isMarried"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Boolean\n"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" person "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Person")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"xxx"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("false")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nperson"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"daking"')]),s._v("\n"),a("span",{attrs:{class:"token function"}},[s._v("println")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("person"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nperson"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("isMarried "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),a("span",{attrs:{class:"token function"}},[s._v("println")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("person"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("isMarried"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("Person person "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{attrs:{class:"token class-name"}},[s._v("Person")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"xxx"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("false")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nperson"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("setName")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"daking"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nSystem"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("println")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("person"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("getName")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("person"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("setMarried")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nSystem"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("println")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("person"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("isMarried")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"kotlin源码布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kotlin源码布局","aria-hidden":"true"}},[s._v("#")]),s._v(" Kotlin源码布局")]),s._v(" "),a("p",[s._v("Java把所有的类组织成包。")]),s._v(" "),a("p",[s._v("每一个Kotlin文件都以一条"),a("code",[s._v("package")]),s._v("语句开头，而文件中定义的所有声明（类、函数及属性）都会被放在这个包中。")]),s._v(" "),a("p",[s._v("假设Kotlin文件A中定义的声明的包与文件B相同，那么文件A可以直接使用文件B中的定义；如果它们的包不相同，文件A需要导入文件B的对应定义。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("package")]),s._v(" geometry"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("shapes "),a("span",{attrs:{class:"token comment"}},[s._v("// 包声明")]),s._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("import")]),s._v(" java"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("util"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Random "),a("span",{attrs:{class:"token comment"}},[s._v("// 导入标准Java库的类")]),s._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Rectangle")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" width"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" height"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" isSquare"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Boolean\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("get")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" height "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" width\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("createRandomRectangle")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Rectangle "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" random "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Random")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Rectangle")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("random"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("nextInt")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" random"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("nextInt")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("和Java一样，导入语句放在文件的最前面并使用关键字"),a("code",[s._v("import")]),s._v("。Kotlin不区分导入的是类还是函数，而且它允许"),a("code",[s._v("import")]),s._v("任何种类的声明。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("package")]),s._v(" geometry"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("example\n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("import")]),s._v(" geometry"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("shapes"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("createRandomRectangle "),a("span",{attrs:{class:"token comment"}},[s._v("// 导入顶层函数")]),s._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("main")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("args"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("String"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token function"}},[s._v("println")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token function"}},[s._v("createRandomRectangle")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("isSquare"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("可以在包名称后加上"),a("code",[s._v("*")]),s._v("来导入特定包中定义的所有声明。注意这种导入不仅让包中定义的类可见，也会让顶层函数和属性可见。例如，上面例子中的导入语句可改为"),a("code",[s._v("import geometry.shapes.*")]),s._v("。")]),s._v(" "),a("p",[s._v("在Java中，要把类放在和包结构相匹配的文件与目录结构中。")]),s._v(" "),a("p",[a("img",{attrs:{src:"/15195673809497/15199746582900.jpg",alt:"Java源码布局-w518"}})]),s._v(" "),a("p",[s._v("在Kotlin中，可以把多个类放在同一个文件中，文件的名称还可以随意选择。Kotlin也没有对磁盘上源码文件的布局强加任何限制。但遵循Java的目录布局并根据包结构把源码文件放到对应的目录中，是个良好的习惯。")]),s._v(" "),a("p",[a("img",{attrs:{src:"/15195673809497/15199746979670.jpg",alt:"Kotlin源码布局-w472"}})]),s._v(" "),a("h2",{attrs:{id:"枚举和when"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举和when","aria-hidden":"true"}},[s._v("#")]),s._v(" 枚举和when")]),s._v(" "),a("h3",{attrs:{id:"声明枚举类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明枚举类","aria-hidden":"true"}},[s._v("#")]),s._v(" 声明枚举类")]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("enum class")]),s._v("关键字来声明一个枚举类。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Color "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    RED"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" GREEN"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" BLUE\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("和Java一样，枚举并不是值的列表，可以给枚举类声明属性和方法。注意要用"),a("strong",[s._v("分号")]),s._v("把枚举常量列表和方法定义分开。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Color")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" r"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" g"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" b"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int\n"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token function"}},[s._v("RED")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token number"}},[s._v("255")]),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("GREEN")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("255")]),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("BLUE")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("255")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// 注意此处的分号是必须的。")]),s._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("rgb")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("r "),a("span",{attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("256")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" g"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("256")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" b\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token function"}},[s._v("println")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("RED"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("rgb")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"使用when处理枚举类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用when处理枚举类","aria-hidden":"true"}},[s._v("#")]),s._v(" 使用when处理枚举类")]),s._v(" "),a("p",[s._v("Java中的分支判断语句"),a("code",[s._v("switch")]),s._v("在Kotlin对应的结构是"),a("code",[s._v("when")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("getMnemonic")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("color"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("when")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("color"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("RED "),a("span",{attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"Richard"')]),s._v("\n        Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("GREEN "),a("span",{attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"Gave"')]),s._v("\n        Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("BLUE "),a("span",{attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"Battle"')]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("和Java不一样，你不需要在每个分支都写上"),a("code",[s._v("break")]),s._v("语句，若匹配成功，只有对应的分支会被执行。")]),s._v(" "),a("p",[s._v("可以把"),a("strong",[s._v("多个值合并到同一分支")]),s._v("，只需要用"),a("strong",[s._v("逗号")]),s._v("隔开这些值。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("getWarmth")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("color"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("when")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("color"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("RED"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ORANGE"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("YELLOW "),a("span",{attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"warm"')]),s._v("\n    Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("GREEN "),a("span",{attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"neutral"')]),s._v("\n    Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("BLUE"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("INDIGO"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("VIOLET "),a("span",{attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"cold"')]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"when允许使用任意对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#when允许使用任意对象","aria-hidden":"true"}},[s._v("#")]),s._v(" when允许使用任意对象")]),s._v(" "),a("p",[s._v("Java中的"),a("code",[s._v("switch")]),s._v("要求必须使用常量（枚举常量、字符串或数字字面值）作为分支条件，而Kotlin的"),a("code",[s._v("when")]),s._v("允许使用任何对象。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("mix")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c1"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c2"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" \n    "),a("span",{attrs:{class:"token keyword"}},[s._v("when")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token function"}},[s._v("setOf")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c1"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c2"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{attrs:{class:"token function"}},[s._v("setOf")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("RED"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("YELLOW"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("->")]),s._v(" ORANGE\n        "),a("span",{attrs:{class:"token function"}},[s._v("setOf")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("BLUE"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("YELLOW"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("->")]),s._v(" GREEN\n        "),a("span",{attrs:{class:"token function"}},[s._v("setOf")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("BLUE"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("VIOLET"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("->")]),s._v(" INDIGO\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Exception")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"Dirty color"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// 如果没有任何其他分支匹配，就会执行这里")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"不带参数的when"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不带参数的when","aria-hidden":"true"}},[s._v("#")]),s._v(" 不带参数的when")]),s._v(" "),a("p",[s._v("如果没有给"),a("code",[s._v("when")]),s._v("表达式提供参数，分支条件就是任意的布尔表达式。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("mixOptimized")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c1"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c2"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" \n    "),a("span",{attrs:{class:"token keyword"}},[s._v("when")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c1 "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("RED "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" c2 "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("YELLOW"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c1 "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("YELLOW "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" c2 "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("RED"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("->")]),s._v("\n            "),a("span",{attrs:{class:"token function"}},[s._v("ORANGE")]),s._v("\n            \n        "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c1 "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("BLUE "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" c2 "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("YELLOW"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c1 "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("YELLOW "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" c2 "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("BLUE"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("->")]),s._v("\n            "),a("span",{attrs:{class:"token function"}},[s._v("GREEN")]),s._v("\n            \n        "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c1 "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("BLUE "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" c2 "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("VIOLET"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c1 "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("VIOLET "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" c2 "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" Color"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("BLUE"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("->")]),s._v("\n            INDIGO\n            \n        "),a("span",{attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Exception")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"Dirty color"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h3",{attrs:{id:"用when代替if"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用when代替if","aria-hidden":"true"}},[s._v("#")]),s._v(" 用when代替if")]),s._v(" "),a("p",[s._v("Kotlin没有三元运算符，因为"),a("code",[s._v("if")]),s._v("表达式有返回值，可利用"),a("code",[s._v("if (x) a else b")]),s._v("来实现与三元运算符一样的功能。")]),s._v(" "),a("p",[s._v("可以使用"),a("code",[s._v("when")]),s._v("来代替连串的"),a("code",[s._v("if")]),s._v("表达式。")]),s._v(" "),a("p",[a("code",[s._v("if")]),s._v("和"),a("code",[s._v("when")]),s._v("都可以使用代码块作为分支体，代码块中的最后一个表达式就是结果。")]),s._v(" "),a("h2",{attrs:{id:"迭代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代","aria-hidden":"true"}},[s._v("#")]),s._v(" 迭代")]),s._v(" "),a("h3",{attrs:{id:"while循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#while循环","aria-hidden":"true"}},[s._v("#")]),s._v(" while循环")]),s._v(" "),a("p",[s._v("Kotlin有"),a("code",[s._v("while")]),s._v("循环和"),a("code",[s._v("do-while")]),s._v("循环，它们的语法和Java中相应的循环没有什么区别。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("condition"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token comment"}},[s._v("/* ... */")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token comment"}},[s._v("/* ... */")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("condition"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"for循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for循环","aria-hidden":"true"}},[s._v("#")]),s._v(" for循环")]),s._v(" "),a("p",[s._v("Kotlin中的"),a("code",[s._v("for")]),s._v("循环仅以唯一一种形式存在，和Java的"),a("code",[s._v("for-each")]),s._v("循环一致。写法为："),a("code",[s._v("for <item> in <elements>")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"区间和数列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区间和数列","aria-hidden":"true"}},[s._v("#")]),s._v(" 区间和数列")]),s._v(" "),a("p",[a("strong",[s._v("区间")]),s._v("本质上就是两个值之间的间隔，这两个值通常是数字，一个起始值，一个结束值。")]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("..")]),s._v("运算符来表示"),a("strong",[s._v("闭合区间")]),s._v("（区间包含起始值和结束值）。例如，"),a("code",[s._v("1..10")]),s._v("、"),a("code",[s._v("'a'..'z'")]),s._v("。")]),s._v(" "),a("p",[s._v("如果你能迭代区间中所有的值，这样的区间被称为"),a("strong",[s._v("数列")]),s._v("。例如，由1到10的整数构成的区间"),a("code",[s._v("1..10")]),s._v("。")]),s._v(" "),a("p",[s._v("整数区间常与"),a("code",[s._v("for")]),s._v("循环一起使用。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),a("span",{attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("1")]),a("span",{attrs:{class:"token operator"}},[s._v("..")]),a("span",{attrs:{class:"token number"}},[s._v("10")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token function"}},[s._v("println")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// 循环打印出1到10的整数")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("可以使用"),a("code",[s._v("until")]),s._v("函数来创建"),a("strong",[s._v("半闭合区间")]),s._v("（区间包含起始值，但不包含结束值）。例如，"),a("code",[s._v("1 until 10")]),s._v("。")]),s._v(" "),a("p",[s._v("可以使用"),a("code",[s._v("downTo")]),s._v("和"),a("code",[s._v("step")]),s._v("来创建一个带步长的数列。例如，"),a("code",[s._v("10 downTo 1 step 2")]),s._v("是一个从10到1的步长为2的数列。注意，"),a("code",[s._v("step")]),s._v("可以是正数或负数，从而实现递增或递减数列。")]),s._v(" "),a("h3",{attrs:{id:"迭代map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代map","aria-hidden":"true"}},[s._v("#")]),s._v(" 迭代map")]),s._v(" "),a("p",[a("code",[s._v("for")]),s._v("循环也常用于迭代集合。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("in")]),s._v(" map"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// 把键和值赋给两个变量")]),s._v("\n    "),a("span",{attrs:{class:"token function"}},[s._v("println")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"'),a("span",{attrs:{class:"token interpolation variable"}},[s._v("$key")]),s._v(" = "),a("span",{attrs:{class:"token interpolation variable"}},[s._v("$value")]),s._v('"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"in运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#in运算符","aria-hidden":"true"}},[s._v("#")]),s._v(" in运算符")]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("in")]),s._v("运算符来检查一个值是否在区间中，或者它的逆运算"),a("code",[s._v("!in")]),s._v("来检查这个值是否不在区间中。此做法同样适用于集合。")]),s._v(" "),a("h2",{attrs:{id:"异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常","aria-hidden":"true"}},[s._v("#")]),s._v(" 异常")]),s._v(" "),a("p",[s._v("一个函数可以正常结束，也可以在出现错误的情况下抛出异常。方法的调用者能捕获到这个异常并处理它；如果没有被处理，异常会沿着调用栈再次抛出。")]),s._v(" "),a("h3",{attrs:{id:"抛出异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抛出异常","aria-hidden":"true"}},[s._v("#")]),s._v(" 抛出异常")]),s._v(" "),a("p",[s._v("Kotlin中抛出异常的方式与Java类似。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("percentage "),a("span",{attrs:{class:"token operator"}},[s._v("!")]),a("span",{attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token operator"}},[s._v("..")]),a("span",{attrs:{class:"token number"}},[s._v("100")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("IllegalArgumentException")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"A percentage value must be between 0 and 100."')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("和Java不同的是，Kotlin中的"),a("code",[s._v("throw")]),s._v("结构是一个表达式，能作为另一个表达式的一部分使用。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" percentage "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" \n    "),a("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("number "),a("span",{attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token operator"}},[s._v("..")]),a("span",{attrs:{class:"token number"}},[s._v("100")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        number\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("IllegalArgumentException")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"A percentage value must be between 0 and 100."')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"处理异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理异常","aria-hidden":"true"}},[s._v("#")]),s._v(" 处理异常")]),s._v(" "),a("p",[s._v("和Java一样，Kotlin也是使用带有"),a("code",[s._v("catch")]),s._v("和"),a("code",[s._v("finally")]),s._v("子句的"),a("code",[s._v("try")]),s._v("结构来处理异常。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("readNumber")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reader"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" BufferedReader"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" line "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" reader"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("readLines")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" Integer"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("line"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" NumberFormatException"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("null")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("finally")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        reader"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("close")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("如果用Java来写这个函数，要在函数声明后写上"),a("code",[s._v("throws IOException")]),s._v("。这是因为"),a("code",[s._v("IOException")]),s._v("是一个"),a("strong",[s._v("受检异常")]),s._v("。在Java中，受检异常必须显式地处理，必须为函数声明能抛出的所有受检异常。")]),s._v(" "),a("p",[s._v("Kotlin并不区分受检异常和未受检异常。不用指定函数抛出的异常，而且可以处理也可以不处理异常。")]),s._v(" "),a("p",[a("code",[s._v("try")]),s._v("可以作为表达式来使用，它的代码块中的最后一句就是表达式结果。"),a("code",[s._v("catch")]),s._v("也是。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("readNumber")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reader"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" BufferedReader"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" line "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" reader"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("readLines")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        Integer"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("line"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" NumberFormatException"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("null")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])])])}],!1,null,null,null);e.options.__file="Kotlin语法基础.md";t.default=e.exports}}]);