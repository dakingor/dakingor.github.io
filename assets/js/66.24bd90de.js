(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{210:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"类、对象和接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类、对象和接口","aria-hidden":"true"}},[s._v("#")]),s._v(" 类、对象和接口")]),s._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#kotlin接口"}},[s._v("Kotlin接口")])]),a("li",[a("a",{attrs:{href:"#访问修饰符"}},[s._v("访问修饰符")])]),a("li",[a("a",{attrs:{href:"#可见性修饰符"}},[s._v("可见性修饰符")])]),a("li",[a("a",{attrs:{href:"#内部类和嵌套类"}},[s._v("内部类和嵌套类")])]),a("li",[a("a",{attrs:{href:"#密封类"}},[s._v("密封类")])]),a("li",[a("a",{attrs:{href:"#类的构造方法"}},[s._v("类的构造方法")]),a("ul",[a("li",[a("a",{attrs:{href:"#主-从构造方法"}},[s._v("主/从构造方法")])]),a("li",[a("a",{attrs:{href:"#主构造方法和初始化语句块"}},[s._v("主构造方法和初始化语句块")])]),a("li",[a("a",{attrs:{href:"#多个构造方法"}},[s._v("多个构造方法")])])])]),a("li",[a("a",{attrs:{href:"#类的属性"}},[s._v("类的属性")]),a("ul",[a("li",[a("a",{attrs:{href:"#属性的声明"}},[s._v("属性的声明")])]),a("li",[a("a",{attrs:{href:"#访问器与支持字段"}},[s._v("访问器与支持字段")])]),a("li",[a("a",{attrs:{href:"#访问器的可见性"}},[s._v("访问器的可见性")])]),a("li",[a("a",{attrs:{href:"#相同的jvm签名"}},[s._v("相同的JVM签名")])])])]),a("li",[a("a",{attrs:{href:"#通用对象方法"}},[s._v("通用对象方法")]),a("ul",[a("li",[a("a",{attrs:{href:"#tostring"}},[s._v("toString()")])]),a("li",[a("a",{attrs:{href:"#equals"}},[s._v("equals()")])]),a("li",[a("a",{attrs:{href:"#hashcode"}},[s._v("hashCode()")])])])]),a("li",[a("a",{attrs:{href:"#数据类"}},[s._v("数据类")]),a("ul",[a("li",[a("a",{attrs:{href:"#数据类的作用"}},[s._v("数据类的作用")])]),a("li",[a("a",{attrs:{href:"#数据类的要求"}},[s._v("数据类的要求")])])])]),a("li",[a("a",{attrs:{href:"#类委托"}},[s._v("类委托")])]),a("li",[a("a",{attrs:{href:"#object关键字"}},[s._v("object关键字")]),a("ul",[a("li",[a("a",{attrs:{href:"#对象声明"}},[s._v("对象声明")])]),a("li",[a("a",{attrs:{href:"#伴生对象"}},[s._v("伴生对象")])]),a("li",[a("a",{attrs:{href:"#伴生对象实现工厂模式"}},[s._v("伴生对象实现工厂模式")])]),a("li",[a("a",{attrs:{href:"#命名伴生对象"}},[s._v("命名伴生对象")])]),a("li",[a("a",{attrs:{href:"#伴生对象和静态成员"}},[s._v("伴生对象和静态成员")])]),a("li",[a("a",{attrs:{href:"#伴生对象实现接口"}},[s._v("伴生对象实现接口")])]),a("li",[a("a",{attrs:{href:"#伴生对象扩展"}},[s._v("伴生对象扩展")])]),a("li",[a("a",{attrs:{href:"#对象表达式"}},[s._v("对象表达式")])])])])])]),a("p"),s._v(" "),a("h2",{attrs:{id:"kotlin接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kotlin接口","aria-hidden":"true"}},[s._v("#")]),s._v(" Kotlin接口")]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("interface")]),s._v("关键字声明一个Kotlin接口。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" Clickable "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("click")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("Kotlin实现接口是在类名后面使用"),a("code",[s._v(":")]),s._v("来代替Java中的"),a("code",[s._v("implements")]),s._v("关键字。接口继承也是用"),a("code",[s._v(":")]),s._v("来代替"),a("code",[s._v("extends")]),s._v("关键字。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Button "),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Clickable "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("click")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("println")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"click"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("code",[s._v("override")]),s._v("修饰符用来标注被重写的父类或接口的方法或属性。不同于Java中的"),a("code",[s._v("@Override")]),s._v("注解，Kotlin的"),a("code",[s._v("override")]),s._v("修饰符是强制要求的。")]),s._v(" "),a("p",[s._v("接口的方法可以有一个"),a("strong",[s._v("默认实现")]),s._v("。这个实现不需要特殊注解，只需要提供一个方法体。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" Clickable "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("click")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("showOff")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("println")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"showOff"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("如果某个类实现了多个接口，而这些接口有同名的默认方法，那么Kotlin编译器强制要求这个类要提供自己的实现。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" Focusable "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("setFocus")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Boolean"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("\n        "),a("span",{attrs:{class:"token function"}},[s._v("println")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"${if (b) "')]),s._v("got"),a("span",{attrs:{class:"token string"}},[s._v('" else "')]),s._v("lost"),a("span",{attrs:{class:"token string"}},[s._v('"}"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("showOff")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("println")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"showOff"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Button "),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Clickable"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Focusable "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("click")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("println")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"clicked"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("showOff")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("super")]),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("Clickable"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("showOff")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("super")]),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("Focusable"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("showOff")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("可通过"),a("code",[s._v("super<父类/接口名>.方法名()")]),s._v("来调用父类或接口的方法。")]),s._v(" "),a("p",[s._v("Kotlin1.0是以Java6为目标设计的，其并不支持接口中的默认方法。因此，它会把每个带默认方法的接口编译成一个普通接口和一个将方法体作为静态函数的类的结合体。")]),s._v(" "),a("h2",{attrs:{id:"访问修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问修饰符","aria-hidden":"true"}},[s._v("#")]),s._v(" 访问修饰符")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("修饰符")]),s._v(" "),a("th",[s._v("相关成员")]),s._v(" "),a("th",[s._v("说明")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("final")]),s._v(" "),a("td",[s._v("不能被重写")]),s._v(" "),a("td",[s._v("类中成员默认使用")])]),s._v(" "),a("tr",[a("td",[s._v("open")]),s._v(" "),a("td",[s._v("可以被重写")]),s._v(" "),a("td",[s._v("需要明确地表明")])]),s._v(" "),a("tr",[a("td",[s._v("abstract")]),s._v(" "),a("td",[s._v("必须被重写")]),s._v(" "),a("td",[s._v("只能在抽象类中声明；抽象成员始终是open的。")])]),s._v(" "),a("tr",[a("td",[s._v("override")]),s._v(" "),a("td",[s._v("重写父类或接口中的成员")]),s._v(" "),a("td",[s._v("如果没有使用final表明，重写的成员默认是open的。")])])])]),s._v(" "),a("p",[s._v("Java的类和方法默认是"),a("code",[s._v("open")]),s._v("的，而Kotlin中默认都是"),a("code",[s._v("final")]),s._v("。")]),s._v(" "),a("p",[s._v("在Kotlin中，和Java一样，可以将一个类声明为"),a("code",[s._v("abstract")]),s._v("。这种类被称作抽象类，它是不能被实例化的，它通常包含一些没有实现并且必须在子类重写的抽象成员。抽象成员是不能有实现的。")]),s._v(" "),a("h2",{attrs:{id:"可见性修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可见性修饰符","aria-hidden":"true"}},[s._v("#")]),s._v(" 可见性修饰符")]),s._v(" "),a("p",[s._v("Kotlin的可见性修饰符与Java的类似，同样是"),a("code",[s._v("public")]),s._v("、"),a("code",[s._v("protected")]),s._v("和"),a("code",[s._v("private")]),s._v("。")]),s._v(" "),a("p",[s._v("Kotlin只把包作为在命名空间里组织代码的一种方式，并没有将其用作可见性控制。")]),s._v(" "),a("p",[s._v("Kotlin新增了一个叫"),a("code",[s._v("internal")]),s._v("的修饰符，它表示“只在模块内部可见”。一个模块就是一组一起编译的Kotlin文件，它可能是一个Intellij IDEA模块、一个Eclipse项目、一个Maven或Gradle项目、一组使用Ant任务进行编译的文件等等。")]),s._v(" "),a("p",[s._v("Java的默认可见性为包私有，而Kotlin默认为"),a("code",[s._v("public")]),s._v("。")]),s._v(" "),a("p",[s._v("Kotlin允许在顶层声明中使用"),a("code",[s._v("private")]),s._v("可见性，包括类、函数和属性。这些声明就只会在声明它们的文件中可见。")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("修饰符")]),s._v(" "),a("th",[s._v("类成员")]),s._v(" "),a("th",[s._v("顶层声明")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("public（默认）")]),s._v(" "),a("td",[s._v("所有地方可见")]),s._v(" "),a("td",[s._v("所有地方可见")])]),s._v(" "),a("tr",[a("td",[s._v("internal")]),s._v(" "),a("td",[s._v("模块中可见")]),s._v(" "),a("td",[s._v("模块中可见")])]),s._v(" "),a("tr",[a("td",[s._v("protected")]),s._v(" "),a("td",[s._v("子类中可见")]),s._v(" "),a("td",[s._v("X")])]),s._v(" "),a("tr",[a("td",[s._v("private")]),s._v(" "),a("td",[s._v("类中可见")]),s._v(" "),a("td",[s._v("文件中可见")])])])]),s._v(" "),a("p",[s._v("注意"),a("code",[s._v("protected")]),s._v("修饰符在Java和Kotlin中的不同行为。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("在Java中，可以从同一个包中、同一个类中和它的子类中访问一个"),a("code",[s._v("protected")]),s._v("成员。")])]),s._v(" "),a("li",[a("p",[s._v("在Kotlin中，"),a("code",[s._v("protected")]),s._v("成员只在类和它的子类中可见。")])])]),s._v(" "),a("p",[s._v("记住一个通用的规则：类的基础类型和类型参数列表中用到的所有类，或者函数的签名都有与这个类或者函数本身相同的可见性。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("internal")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("open")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" TalkativeButton "),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Focusable "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("yell")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("println")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"yell"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("whisper")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("println")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"whisper"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 错误：public成员暴露了internal的接收者类型")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" TalkativeButton"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("speech")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token comment"}},[s._v("// 错误：类的扩展函数不能访问它的private和protected成员")]),s._v("\n    "),a("span",{attrs:{class:"token function"}},[s._v("yell")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{attrs:{class:"token function"}},[s._v("whisper")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h2",{attrs:{id:"内部类和嵌套类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内部类和嵌套类","aria-hidden":"true"}},[s._v("#")]),s._v(" 内部类和嵌套类")]),s._v(" "),a("p",[s._v("内部类和嵌套类都是一个在另一个类的内部定义的类。区别在于内部类存储外部类的引用，而嵌套类没有。")]),s._v(" "),a("p",[s._v("在Kotlin中，在类的内部定义的类默认为嵌套类。而Java默认为内部类。")]),s._v(" "),a("p",[s._v("内部类和嵌套类在Java和Kotlin中的对应关系如下。")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("类")]),s._v(" "),a("th",[s._v("在Java中")]),s._v(" "),a("th",[s._v("在Kotlin中")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("内部类")]),s._v(" "),a("td",[s._v("class A")]),s._v(" "),a("td",[s._v("inner class A")])]),s._v(" "),a("tr",[a("td",[s._v("嵌套类")]),s._v(" "),a("td",[s._v("static class A")]),s._v(" "),a("td",[s._v("class A")])])])]),s._v(" "),a("p",[s._v("在Kotlin的内部类中，需要使用"),a("code",[s._v("this@外部类名")]),s._v("来访问外部类。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Outer "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("inner")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Inner "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("getOuterReference")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Outer "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("this")]),a("span",{attrs:{class:"token label symbol"}},[s._v("@Outer")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"密封类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#密封类","aria-hidden":"true"}},[s._v("#")]),s._v(" 密封类")]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("sealed")]),s._v("修饰符标注的类叫作密封类。它对子类的创建有着严格的限制：所有的"),a("strong",[s._v("直接子类")]),s._v("必须嵌套在父类中。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("sealed")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Expr "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Num")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" value"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Expr")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Sum")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" left"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Expr"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" right"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Expr"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Expr")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("注意，"),a("code",[s._v("sealed")]),s._v("修饰符隐含了这个类是一个"),a("code",[s._v("open")]),s._v("类，不再需要显式地添加"),a("code",[s._v("open")]),s._v("修饰符。")]),s._v(" "),a("p",[s._v("如果你在"),a("code",[s._v("when")]),s._v("表达式中处理所有"),a("code",[s._v("sealed")]),s._v("类的子类，那么你就不再需要提供默认分支（"),a("code",[s._v("else ->")]),s._v("分支）。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("eval")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Expr"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" \n    "),a("span",{attrs:{class:"token keyword"}},[s._v("when")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("is")]),s._v(" Expr"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Num "),a("span",{attrs:{class:"token operator"}},[s._v("->")]),s._v(" e"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("is")]),s._v(" Expr"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Sum "),a("span",{attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("eval")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("eval")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("当你在"),a("code",[s._v("when")]),s._v("中使用"),a("code",[s._v("sealed")]),s._v("类，并且"),a("code",[s._v("sealed")]),s._v("类添加了一个新的子类时，有返回值的"),a("code",[s._v("when")]),s._v("表达式会出现编译失败，编译器会告诉你需要在哪些"),a("code",[s._v("when")]),s._v("代码块中添加新增的"),a("code",[s._v("sealed")]),s._v("类的子类的判断分支。")]),s._v(" "),a("p",[s._v("在Kotlin1.0中，"),a("code",[s._v("sealed")]),s._v("类的限制是相当严格的。例如，所有的子类必须是嵌套的，并且子类不能创建为data类。而Kotlin1.1解除了这些限制，并允许在"),a("strong",[s._v("同一个文件")]),s._v("的任何位置定义"),a("code",[s._v("sealed")]),s._v("类的子类。")]),s._v(" "),a("h2",{attrs:{id:"类的构造方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类的构造方法","aria-hidden":"true"}},[s._v("#")]),s._v(" 类的构造方法")]),s._v(" "),a("h3",{attrs:{id:"主-从构造方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主-从构造方法","aria-hidden":"true"}},[s._v("#")]),s._v(" 主/从构造方法")]),s._v(" "),a("p",[s._v("在Java中，一个类可以声明一个或多个构造方法。")]),s._v(" "),a("p",[s._v("Kotlin区分主构造方法和从构造方法。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("主构造方法是在类体外部声明，通常是主要而简洁的初始化类的方法。")])]),s._v(" "),a("li",[a("p",[s._v("从构造方法是在类体内部声明的。")])])]),s._v(" "),a("h3",{attrs:{id:"主构造方法和初始化语句块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主构造方法和初始化语句块","aria-hidden":"true"}},[s._v("#")]),s._v(" 主构造方法和初始化语句块")]),s._v(" "),a("p",[a("code",[s._v("constructor")]),s._v("关键字用来开始一个主构造方法或从构造方法的声明。主构造方法声明在类体外部，而从构造方法声明在类体内部。")]),s._v(" "),a("p",[a("code",[s._v("init")]),s._v("关键字用来引入一个初始化语句块，它包含了在类被创建时执行的代码。因为主构造方法有语法限制，不能包含初始化代码，所以常使用初始化语句块。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" User "),a("span",{attrs:{class:"token keyword"}},[s._v("constructor")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("_nickname"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" nickname"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String\n    \n    "),a("span",{attrs:{class:"token keyword"}},[s._v("init")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        nickname "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" _nickname\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("如果主构造方法没有注解或可见性修饰符，可以去掉"),a("code",[s._v("constructor")]),s._v("关键字。另外，这里可以直接用主构造方法的参数来初始化属性，从而去掉"),a("code",[s._v("init")]),s._v("代码块。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("User")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("_nickname"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" nickname "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" _nickname\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("如果属性用相应的构造方法参数来初始化，代码可以通过把"),a("code",[s._v("val")]),s._v("或"),a("code",[s._v("var")]),s._v("关键字加在该参数前进行简化。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("User")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" nickname"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("可以像函数参数一样为构造方法参数声明一个默认值。另外，如果所有的构造方法参数都有默认值，编译器会生成一个额外的不带参数的构造方法来使用所有的默认值。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("User")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" nickname"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" isSubscribed"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Boolean "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("如果你的类具有一个父类，主构造方法同样需要初始化父类。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("open")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("User")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" nickname"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("..")]),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("GoogleUser")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nickname"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("User")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nickname"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("..")]),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("如果没有给一个类声明任何的构造方法，编译器会生成一个不做任何事情的默认构造方法。注意，它的子类必须显式地调用它的这个默认构造方法。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("open")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" User "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("..")]),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" GoogleUser "),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("User")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("..")]),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("可以将构造方法标记为"),a("code",[s._v("private")]),s._v("来确保类不被其他代码实例化。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Secretive "),a("span",{attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("constructor")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"多个构造方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多个构造方法","aria-hidden":"true"}},[s._v("#")]),s._v(" 多个构造方法")]),s._v(" "),a("p",[s._v("大多数在Java中需要重载构造方法的场景都被Kotlin支持参数默认值和参数命名的语法涵盖了。")]),s._v(" "),a("p",[s._v("但还是会有需要多个构造方法的情景，最常见的是当你需要扩展一个框架类来提供多个构造方法，以便于通过不同的方式来初始化类。例如，Android的View类。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("open")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" View "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("constructor")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ctx"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Context"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// 从构造方法")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[s._v("constructor")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ctx"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Context"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" attr"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" AttributeSet"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// 从构造方法")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("子类可以通过"),a("code",[s._v("super()")]),s._v("关键字来调用对应的父类构造方法。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" MyButton "),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" View "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("constructor")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ctx"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Context"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("super")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ctx"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[s._v("constructor")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ctx"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Context"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" attr"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" AttributeSet"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("super")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ctx"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" attr"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("也可以使用"),a("code",[s._v("this()")]),s._v("关键字来从一个构造方法中调用同一个类中的另一个构造方法。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" MyButton "),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" View "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("constructor")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ctx"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Context"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("this")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ctx"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" MY_STYLE"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[s._v("constructor")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ctx"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Context"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" attr"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" AttributeSet"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("super")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ctx"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" attr"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("如果类没有主构造方法，那么每个从构造方法必须直接（"),a("code",[s._v("super()")]),s._v("）或间接（"),a("code",[s._v("this()")]),s._v("）地调用一个基类构造方法。")]),s._v(" "),a("h2",{attrs:{id:"类的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类的属性","aria-hidden":"true"}},[s._v("#")]),s._v(" 类的属性")]),s._v(" "),a("h3",{attrs:{id:"属性的声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性的声明","aria-hidden":"true"}},[s._v("#")]),s._v(" 属性的声明")]),s._v(" "),a("p",[s._v("可以在主构造方法中直接声明一个属性。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("User")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" nickname"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("也可以在类体内部声明一个属性。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" User "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" nickname"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("通过"),a("code",[s._v("override")]),s._v("关键字来重写父类或接口的属性。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" User "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" nickname"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("PrivateUser")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" nickname"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" User\n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("GoogleUser")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" email"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" User "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" nickname"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("get")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" email"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("substringBefore")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v("'@'")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("FacebookUser")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" account"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" User "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" nickname"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" account\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h3",{attrs:{id:"访问器与支持字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问器与支持字段","aria-hidden":"true"}},[s._v("#")]),s._v(" 访问器与支持字段")]),s._v(" "),a("p",[s._v("在访问器的函数体中，可通过"),a("code",[s._v("field")]),s._v("标识符来访问支持字段。在"),a("code",[s._v("getter")]),s._v("中，只能读取"),a("code",[s._v("field")]),s._v("的值；而在"),a("code",[s._v("setter")]),s._v("中，既能读取它也能修改它。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("User")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" name"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" address"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"unspecified"')]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("set")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{attrs:{class:"token function"}},[s._v("println")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"'),a("span",{attrs:{class:"token interpolation variable"}},[s._v("$name")]),s._v("'s address was changed: "),a("span",{attrs:{class:"token interpolation variable"}},[s._v("$field")]),s._v(" -> "),a("span",{attrs:{class:"token interpolation variable"}},[s._v("$value")]),s._v('"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            field "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" value\n        "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"访问器的可见性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问器的可见性","aria-hidden":"true"}},[s._v("#")]),s._v(" 访问器的可见性")]),s._v(" "),a("p",[s._v("属性的访问器的可见性默认与属性的可见性相同，但可以在"),a("code",[s._v("set")]),s._v("和"),a("code",[s._v("get")]),s._v("关键字前放置可见性修饰符来修改对应访问器的可见性。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Counter "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" count"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("0")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("set")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"相同的jvm签名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相同的jvm签名","aria-hidden":"true"}},[s._v("#")]),s._v(" 相同的JVM签名")]),s._v(" "),a("p",[s._v("Kotlin在实现Java接口时，属性的访问器可能会跟Java接口定义的方法冲突，出现“相同的JVM签名”错误。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),a("span",{attrs:{class:"token class-name"}},[s._v("UserDetails")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    String "),a("span",{attrs:{class:"token function"}},[s._v("getUsername")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("// var username自动生成的getter与UserDetails接口定义的getUsername()，会因为JVM签名相同而报错")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Reader")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" username"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('""')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" UserDetails\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("解决方法是：用"),a("code",[s._v("private")]),s._v("声明属性，并手写实现Java接口的方法。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Reader")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" username"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('""')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" UserDetails "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("getUsername")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" username\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"通用对象方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通用对象方法","aria-hidden":"true"}},[s._v("#")]),s._v(" 通用对象方法")]),s._v(" "),a("h3",{attrs:{id:"tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tostring","aria-hidden":"true"}},[s._v("#")]),s._v(" toString()")]),s._v(" "),a("p",[s._v("和Java一样，Kotlin中的所有类都提供了一种方式来获取类对象的字符串表示形式。")]),s._v(" "),a("p",[s._v("一个对象的字符串表示默认类似"),a("code",[s._v("User@5e9f23b4")]),s._v("，你可以重写它对应类的"),a("code",[s._v("toString()")]),s._v("来修改。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("User")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" nickname"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("toString")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"User(nickname='),a("span",{attrs:{class:"token interpolation variable"}},[s._v("$nickname")]),s._v(')"')]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"equals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#equals","aria-hidden":"true"}},[s._v("#")]),s._v(" equals()")]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("equals()")]),s._v("来比较两个对象是否相等。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("User")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" nickname"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("equals")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("other"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Any"),a("span",{attrs:{class:"token operator"}},[s._v("?")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Boolean "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("other "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v(" other "),a("span",{attrs:{class:"token operator"}},[s._v("!")]),a("span",{attrs:{class:"token keyword"}},[s._v("is")]),s._v(" User"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" nickname "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" other"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("nickname\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("在Java中，可以使用"),a("code",[s._v("==")]),s._v("运算符来比较基本数据类型（比较两者的值）和引用类型（比较两者的引用）。而在Kotlin中，"),a("code",[s._v("==")]),s._v("运算符是通过调用"),a("code",[s._v("equals()")]),s._v("来比较两个值；要想进行引用比较，需要使用"),a("code",[s._v("===")]),s._v("运算符。")]),s._v(" "),a("h3",{attrs:{id:"hashcode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashcode","aria-hidden":"true"}},[s._v("#")]),s._v(" hashCode()")]),s._v(" "),a("p",[s._v("调用对象的"),a("code",[s._v("hashCode()")]),s._v("获取它的hash值。子类需要遵循Java同样的规则来重写这个方法，否则会影响对象在Hash容器中的表现。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("User")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" name"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" id"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("hashCode")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("hashCode")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("31")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" id\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"数据类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类","aria-hidden":"true"}},[s._v("#")]),s._v(" 数据类")]),s._v(" "),a("p",[s._v("为类添加"),a("code",[s._v("data")]),s._v("修饰符来声明一个数据类。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("data")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("User")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" name"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" id"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"数据类的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类的作用","aria-hidden":"true"}},[s._v("#")]),s._v(" 数据类的作用")]),s._v(" "),a("p",[s._v("数据类为我们自动生成如下的东西：")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("equals()")]),s._v("和"),a("code",[s._v("hashCode()")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("toString()")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("componentN()")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("copy()")])])])]),s._v(" "),a("p",[s._v("通常将数据类的所有属性都声明为"),a("code",[s._v("val")]),s._v("，使它的实例不可变。然后外界通过数据类的"),a("code",[s._v("copy()")]),s._v("来获得该实例的一个副本。普通的不可变类也可以手动实现一个"),a("code",[s._v("copy")]),s._v("函数。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("User")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" name"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" id"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("copy")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("this")]),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            id"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("this")]),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{attrs:{class:"token function"}},[s._v("User")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" id"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"数据类的要求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类的要求","aria-hidden":"true"}},[s._v("#")]),s._v(" 数据类的要求")]),s._v(" "),a("p",[s._v("主构造函数必须至少有一个参数。")]),s._v(" "),a("p",[s._v("主构造函数中的所有参数必须被标记为"),a("code",[s._v("val")]),s._v("或"),a("code",[s._v("var")]),s._v("。虽然数据类的属性可以是"),a("code",[s._v("var")]),s._v("，但强烈推荐只使用"),a("code",[s._v("val")]),s._v("属性，让数据类的实例不可变。")]),s._v(" "),a("p",[s._v("数据类不能有以下修饰符："),a("code",[s._v("abstract")]),s._v("、"),a("code",[s._v("inner")]),s._v("、"),a("code",[s._v("open")]),s._v("和"),a("code",[s._v("sealed")]),s._v("等。")]),s._v(" "),a("p",[s._v("在Kotlin1.1之前，数据类只能实现接口。从Kotlin1.1开始，数据类也可以继承其他类。")]),s._v(" "),a("h2",{attrs:{id:"类委托"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类委托","aria-hidden":"true"}},[s._v("#")]),s._v(" 类委托")]),s._v(" "),a("p",[s._v("在Java中，可通过装饰者模式来为一个类添加一些行为。这种模式的本质是：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("创建一个新类，实现与原始类一样的接口，并将原始类的实例作为字段保存。")])]),s._v(" "),a("li",[a("p",[s._v("这个新类可添加新的方法来支持新的行为。")])]),s._v(" "),a("li",[a("p",[s._v("而与原始类拥有同样行为的方法不用被修改，只需要直接转发到原始类的实例上即可。")])])]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" DelegatingCollection"),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Collection"),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" innerList "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" arrayListOf"),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" size"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int "),a("span",{attrs:{class:"token keyword"}},[s._v("get")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" innerList"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("size\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("isEmpty")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Boolean "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" innerList"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("isEmpty")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("contains")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("element"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" T"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Boolean "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" innerList"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("contains")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("element"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("iterator")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Iterator"),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" innerList"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("iterator")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("containsAll")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("elements"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Collection"),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Boolean "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" \n        innerList"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("containsAll")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("elements"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        \n    "),a("span",{attrs:{class:"token comment"}},[s._v("// 定义新行为...")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("按照Java做法来实现会出现相当多的样板代码，幸好Kotlin将"),a("strong",[s._v("委托")]),s._v("作为一个语言级别的功能做了头等支持。可以使用"),a("code",[s._v("by")]),s._v("关键字将接口的实现委托给另一个对象，编译器会自动实现接口的方法并在方法的内部调用被委托对象的对应方法。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" DelegatingCollection"),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    innerList"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Collection"),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" arrayListOf"),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Collection"),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("by")]),s._v(" innerList "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"object关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object关键字","aria-hidden":"true"}},[s._v("#")]),s._v(" object关键字")]),s._v(" "),a("p",[s._v("常用"),a("code",[s._v("object")]),s._v("关键字来实现以下场景：")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("对象声明")]),s._v("。这是定义单例的一种方式。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("伴生对象")]),s._v("。它可以持有工厂方法、与这个类相关但在调用时并不依赖类实例的方法。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("对象表达式")]),s._v("。用来替代Java的匿名内部类。")])])]),s._v(" "),a("p",[a("code",[s._v("object")]),s._v("实现的这些场景都遵循着一个核心理念："),a("code",[s._v("object")]),s._v("关键字定义一个类并同时创建一个实例。")]),s._v(" "),a("h3",{attrs:{id:"对象声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象声明","aria-hidden":"true"}},[s._v("#")]),s._v(" 对象声明")]),s._v(" "),a("p",[s._v("Kotlin使用对象声明为单例模式提供了最高级的语言支持。对象声明将类声明与该类的单一实例声明结合在一起。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("object")]),s._v(" Payroll\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token class-name"}},[s._v("Payroll")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("final")]),s._v(" Payroll INSTANCE"),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        Payroll var0 "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{attrs:{class:"token class-name"}},[s._v("Payroll")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        INSTANCE "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" var0"),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("与类一样，一个对象声明也可以包含属性、方法、初始化语句块等声明。"),a("strong",[s._v("唯一不允许的就是构造方法")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("object")]),s._v(" Payroll "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" allEmployees "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" arrayListOf"),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("Person"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("calculateSalary")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("person "),a("span",{attrs:{class:"token keyword"}},[s._v("in")]),s._v(" allEmployees"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("与变量一样，对象声明允许你使用"),a("code",[s._v("对象名.")]),s._v("来调用方法和访问属性。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[s._v("Payroll"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("allEmployees"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("add")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token function"}},[s._v("Person")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token operator"}},[s._v("..")]),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nPayroll"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("calculateSalary")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("对象声明同样"),a("strong",[s._v("可以继承自类和接口")]),s._v("。")]),s._v(" "),a("p",[s._v("可以在任何可以使用普通对象的地方使用单例对象。")]),s._v(" "),a("p",[s._v("可以在一个类的内部声明对象。这样的对象同样只有单一实例，不会在每个容器类的实例中具有不同的实例。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("data")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Person")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" name"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token comment"}},[s._v("// 使用对象声明定义的名称比较器是一个单例")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("object")]),s._v(" NameComparator"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Comparator"),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("Person"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("compare")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p1"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Person"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" p2"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Person"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" \n            p1"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("compareTo")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p2"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("Kotlin中的对象声明会"),a("strong",[s._v("被编译成通过静态字段来持有它的单一实例的类")]),s._v("，这个字段名为"),a("code",[s._v("INSTANCE")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("NameComparator"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("INSTANCE"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("compare")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p1"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" p2"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"伴生对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#伴生对象","aria-hidden":"true"}},[s._v("#")]),s._v(" 伴生对象")]),s._v(" "),a("p",[s._v("Kotlin中的类"),a("strong",[s._v("不能拥有静态成员")]),s._v("，Java的"),a("code",[s._v("static")]),s._v("关键字并不是Kotlin语言的一部分。作为替代，Kotlin依赖"),a("strong",[s._v("包级别函数")]),s._v("和"),a("strong",[s._v("对象声明")]),s._v("。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("包级别函数，即顶层函数，在大多数情形下能够替代Java的静态方法。")])]),s._v(" "),a("li",[a("p",[s._v("对象声明能够替代Java的静态方法和静态字段。")])])]),s._v(" "),a("p",[s._v("在大多数情况下，还是推荐使用顶层函数，但它不能访问类的"),a("code",[s._v("private")]),s._v("和"),a("code",[s._v("protected")]),s._v("成员。")]),s._v(" "),a("p",[s._v("在类的内部定义的对象声明，可以加上"),a("code",[s._v("companion")]),s._v("关键字使其变成"),a("strong",[s._v("伴生对象")]),s._v("。这样做的好处是：不再需要显式地指明对象的名称，可以直接通过容器类名称来访问这个对象的方法和属性。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" A "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("companion")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("object")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("bar")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{attrs:{class:"token function"}},[s._v("println")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"companion object called"')]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[s._v("A"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("bar")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("注意，类的伴生对象成员在子类中"),a("strong",[s._v("不能被重写")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"伴生对象实现工厂模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#伴生对象实现工厂模式","aria-hidden":"true"}},[s._v("#")]),s._v(" 伴生对象实现工厂模式")]),s._v(" "),a("p",[s._v("伴生对象可以访问类中的"),a("code",[s._v("private")]),s._v("成员，包括"),a("code",[s._v("private")]),s._v("构造方法，它是实现工厂模式的理想选择。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" User "),a("span",{attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("constructor")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" nickname"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("companion")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("object")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("newSubscribingUser")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("email"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{attrs:{class:"token function"}},[s._v("User")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("email"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("substringBefore")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v("'@'")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        \n        "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("newFacebookUser")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("account"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{attrs:{class:"token function"}},[s._v("User")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("account"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"命名伴生对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命名伴生对象","aria-hidden":"true"}},[s._v("#")]),s._v(" 命名伴生对象")]),s._v(" "),a("p",[s._v("伴生对象不需要显式地指明名称，默认分配为"),a("strong",[s._v("Companion")]),s._v("。但若需要，可以显式地对它进行命名。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Person")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" name"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("companion")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("object")]),s._v(" Loader "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("fromJson")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("jsonText"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Person "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("..")]),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[s._v("Person"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("fromJson")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v("\"{name: 'daking'}\"")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nPerson"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Loader"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("fromJson")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v("\"{name: 'daking'}\"")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"伴生对象和静态成员"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#伴生对象和静态成员","aria-hidden":"true"}},[s._v("#")]),s._v(" 伴生对象和静态成员")]),s._v(" "),a("p",[s._v("类的伴生对象会被编译成常规对象：类中的一个引用了它的实例的静态字段。")]),s._v(" "),a("p",[s._v("如果伴生对象没有命名，在Java代码中可通过"),a("strong",[s._v("Companion")]),s._v("引用来访问；如果伴生对象有名字，那就用这个名字来替代Companion。")]),s._v(" "),a("p",[s._v("Java需要类中的成员是静态的，Kotlin可以在对应的成员上使用"),a("code",[s._v("@JvmStatic")]),s._v("注解来达到这个目的。可以在一个顶层属性或者声明在object中的属性上使用"),a("code",[s._v("@JvmField")]),s._v("注解来声明一个"),a("code",[s._v("static")]),s._v("字段。")]),s._v(" "),a("p",[s._v("Kotlin可以使用与Java相同的语法来访问Java类中声明的静态方法和字段。")]),s._v(" "),a("h3",{attrs:{id:"伴生对象实现接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#伴生对象实现接口","aria-hidden":"true"}},[s._v("#")]),s._v(" 伴生对象实现接口")]),s._v(" "),a("p",[s._v("伴生对象可以实现接口，并且可以直接将包含它的类的名称当作实现了该接口的对象实例来使用。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" JSONFactory"),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("fromJson")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("jsonText"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" T\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Person")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" name"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("companion")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("object")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" JSONFactory"),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("Person"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("fromJson")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("jsonText"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Person "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("..")]),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" loadFromJson"),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("factory"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" JSONFactory"),a("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{attrs:{class:"token operator"}},[s._v(">")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" T "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("..")]),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token function"}},[s._v("loadFromJson")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Person"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// 直接将Person的名字作为JSONFactory的实例")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"伴生对象扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#伴生对象扩展","aria-hidden":"true"}},[s._v("#")]),s._v(" 伴生对象扩展")]),s._v(" "),a("p",[s._v("可以为伴生对象定义一个扩展函数，使包含它的类具有新的行为。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("Person")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" name"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("companion")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("object")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" Person"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Companion"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("fromJson")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("jsonText"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" Person "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token operator"}},[s._v("..")]),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("val")]),s._v(" p "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" Person"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("fromJson")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("jsonText"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"对象表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象表达式","aria-hidden":"true"}},[s._v("#")]),s._v(" 对象表达式")]),s._v(" "),a("p",[a("code",[s._v("object")]),s._v("关键字不仅能用来声明单例式的对象，还能用来声明"),a("strong",[s._v("匿名对象")]),s._v("。匿名对象替代了Java中匿名内部类的用法。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[s._v("window"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("addMouseListener")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("object")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("MouseAdapter")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("mouseClicked")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" MouseEvent"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        \n        "),a("span",{attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("mouseEntered")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{attrs:{class:"token operator"}},[s._v(":")]),s._v(" MouseEvent"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("与对象声明不同，匿名对象不是单例的。每次对象表达式被执行都会创建一个新的对象实例。其实，"),a("strong",[s._v("匿名对象本质上是定义一个匿名类并同时创建一个实例")]),s._v("。")]),s._v(" "),a("p",[s._v("与Java匿名内部类只能扩展一个类或实现一个接口不同，Kotlin的"),a("strong",[s._v("匿名对象可以实现多个接口或不实现接口")]),s._v("。")]),s._v(" "),a("p",[s._v("与Java的匿名类一样，在对象表达式中可访问创建它的函数中的变量。但与Java不同，访问并没有被限制在final变量，还可以在对象表达式中修改变量的值。")])])}],!1,null,null,null);e.options.__file="类、对象和接口.md";t.default=e.exports}}]);